
Project_STM32_LAB5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004154  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004260  08004260  00014260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004314  08004314  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004314  08004314  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004314  08004314  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004314  08004314  00014314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004318  08004318  00014318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800431c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000070  0800438c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  0800438c  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010829  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002372  00000000  00000000  000308c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00032c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  000339c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002668  00000000  00000000  00034660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff78  00000000  00000000  00036cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dba4  00000000  00000000  00046c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d47e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bb4  00000000  00000000  000d4838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004248 	.word	0x08004248

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004248 	.word	0x08004248

0800014c <uart_communication_fsm>:
uint8_t data[] = "HELLO WORLD \r\n";

int isRST = 0;
int isOK = 0;

void uart_communication_fsm(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(uartState){
 8000150:	4b44      	ldr	r3, [pc, #272]	; (8000264 <uart_communication_fsm+0x118>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b05      	cmp	r3, #5
 8000156:	d87f      	bhi.n	8000258 <uart_communication_fsm+0x10c>
 8000158:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <uart_communication_fsm+0x14>)
 800015a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800015e:	bf00      	nop
 8000160:	08000259 	.word	0x08000259
 8000164:	08000179 	.word	0x08000179
 8000168:	080001bd 	.word	0x080001bd
 800016c:	080001ab 	.word	0x080001ab
 8000170:	08000219 	.word	0x08000219
 8000174:	08000239 	.word	0x08000239
	case UART_IDLE:
		break;
	case UART_RST:
		ADC_value = HAL_ADC_GetValue(&hadc1);
 8000178:	483b      	ldr	r0, [pc, #236]	; (8000268 <uart_communication_fsm+0x11c>)
 800017a:	f000 ffe3 	bl	8001144 <HAL_ADC_GetValue>
 800017e:	4603      	mov	r3, r0
 8000180:	4a3a      	ldr	r2, [pc, #232]	; (800026c <uart_communication_fsm+0x120>)
 8000182:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (void *)response, sprintf(response, "!ADC=%lu#\r\n", ADC_value), 1000);
 8000184:	4b39      	ldr	r3, [pc, #228]	; (800026c <uart_communication_fsm+0x120>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	461a      	mov	r2, r3
 800018a:	4939      	ldr	r1, [pc, #228]	; (8000270 <uart_communication_fsm+0x124>)
 800018c:	4839      	ldr	r0, [pc, #228]	; (8000274 <uart_communication_fsm+0x128>)
 800018e:	f003 fc21 	bl	80039d4 <siprintf>
 8000192:	4603      	mov	r3, r0
 8000194:	b29a      	uxth	r2, r3
 8000196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800019a:	4936      	ldr	r1, [pc, #216]	; (8000274 <uart_communication_fsm+0x128>)
 800019c:	4836      	ldr	r0, [pc, #216]	; (8000278 <uart_communication_fsm+0x12c>)
 800019e:	f002 fdcd 	bl	8002d3c <HAL_UART_Transmit>
		uartState = UART_RESPONSE;
 80001a2:	4b30      	ldr	r3, [pc, #192]	; (8000264 <uart_communication_fsm+0x118>)
 80001a4:	2203      	movs	r2, #3
 80001a6:	701a      	strb	r2, [r3, #0]
		break;
 80001a8:	e059      	b.n	800025e <uart_communication_fsm+0x112>
	case UART_RESPONSE:
		uartState = UART_WAIT_OK;
 80001aa:	4b2e      	ldr	r3, [pc, #184]	; (8000264 <uart_communication_fsm+0x118>)
 80001ac:	2202      	movs	r2, #2
 80001ae:	701a      	strb	r2, [r3, #0]
		setTimers(1, TIME_FOR_3S);
 80001b0:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80001b4:	2001      	movs	r0, #1
 80001b6:	f000 fc0b 	bl	80009d0 <setTimers>
		break;
 80001ba:	e050      	b.n	800025e <uart_communication_fsm+0x112>
	case UART_WAIT_OK:
		if(timer_flags[1] == 1) {
 80001bc:	4b2f      	ldr	r3, [pc, #188]	; (800027c <uart_communication_fsm+0x130>)
 80001be:	685b      	ldr	r3, [r3, #4]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d113      	bne.n	80001ec <uart_communication_fsm+0xa0>
			HAL_UART_Transmit(&huart2, (void *)response, sprintf(response, "!ADC=%lu#\r\n", ADC_value), 1000);
 80001c4:	4b29      	ldr	r3, [pc, #164]	; (800026c <uart_communication_fsm+0x120>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	461a      	mov	r2, r3
 80001ca:	4929      	ldr	r1, [pc, #164]	; (8000270 <uart_communication_fsm+0x124>)
 80001cc:	4829      	ldr	r0, [pc, #164]	; (8000274 <uart_communication_fsm+0x128>)
 80001ce:	f003 fc01 	bl	80039d4 <siprintf>
 80001d2:	4603      	mov	r3, r0
 80001d4:	b29a      	uxth	r2, r3
 80001d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001da:	4926      	ldr	r1, [pc, #152]	; (8000274 <uart_communication_fsm+0x128>)
 80001dc:	4826      	ldr	r0, [pc, #152]	; (8000278 <uart_communication_fsm+0x12c>)
 80001de:	f002 fdad 	bl	8002d3c <HAL_UART_Transmit>
			setTimers(1, TIME_FOR_3S);
 80001e2:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80001e6:	2001      	movs	r0, #1
 80001e8:	f000 fbf2 	bl	80009d0 <setTimers>
		}
		if(isOK){
 80001ec:	4b24      	ldr	r3, [pc, #144]	; (8000280 <uart_communication_fsm+0x134>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d033      	beq.n	800025c <uart_communication_fsm+0x110>
			if(isRST){
 80001f4:	4b23      	ldr	r3, [pc, #140]	; (8000284 <uart_communication_fsm+0x138>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d003      	beq.n	8000204 <uart_communication_fsm+0xb8>
				uartState = UART_END;
 80001fc:	4b19      	ldr	r3, [pc, #100]	; (8000264 <uart_communication_fsm+0x118>)
 80001fe:	2204      	movs	r2, #4
 8000200:	701a      	strb	r2, [r3, #0]
 8000202:	e002      	b.n	800020a <uart_communication_fsm+0xbe>
			}else{
				uartState = UART_IDLE;
 8000204:	4b17      	ldr	r3, [pc, #92]	; (8000264 <uart_communication_fsm+0x118>)
 8000206:	2200      	movs	r2, #0
 8000208:	701a      	strb	r2, [r3, #0]
			}
			isOK = 0;
 800020a:	4b1d      	ldr	r3, [pc, #116]	; (8000280 <uart_communication_fsm+0x134>)
 800020c:	2200      	movs	r2, #0
 800020e:	601a      	str	r2, [r3, #0]
			isRST = 0;
 8000210:	4b1c      	ldr	r3, [pc, #112]	; (8000284 <uart_communication_fsm+0x138>)
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
		}
		break;
 8000216:	e021      	b.n	800025c <uart_communication_fsm+0x110>
	case UART_END:
		HAL_UART_Transmit(&huart2, (void *)response, sprintf(response, "END RST\r\n"), 1000);
 8000218:	491b      	ldr	r1, [pc, #108]	; (8000288 <uart_communication_fsm+0x13c>)
 800021a:	4816      	ldr	r0, [pc, #88]	; (8000274 <uart_communication_fsm+0x128>)
 800021c:	f003 fbda 	bl	80039d4 <siprintf>
 8000220:	4603      	mov	r3, r0
 8000222:	b29a      	uxth	r2, r3
 8000224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000228:	4912      	ldr	r1, [pc, #72]	; (8000274 <uart_communication_fsm+0x128>)
 800022a:	4813      	ldr	r0, [pc, #76]	; (8000278 <uart_communication_fsm+0x12c>)
 800022c:	f002 fd86 	bl	8002d3c <HAL_UART_Transmit>
		uartState = UART_IDLE;
 8000230:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <uart_communication_fsm+0x118>)
 8000232:	2200      	movs	r2, #0
 8000234:	701a      	strb	r2, [r3, #0]
		break;
 8000236:	e012      	b.n	800025e <uart_communication_fsm+0x112>
	case UART_ERROR:
		HAL_UART_Transmit(&huart2, (void *)response, sprintf(response, "OH NO! STH WRONG HAPPENNED\r\n"), 1000);
 8000238:	4914      	ldr	r1, [pc, #80]	; (800028c <uart_communication_fsm+0x140>)
 800023a:	480e      	ldr	r0, [pc, #56]	; (8000274 <uart_communication_fsm+0x128>)
 800023c:	f003 fbca 	bl	80039d4 <siprintf>
 8000240:	4603      	mov	r3, r0
 8000242:	b29a      	uxth	r2, r3
 8000244:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000248:	490a      	ldr	r1, [pc, #40]	; (8000274 <uart_communication_fsm+0x128>)
 800024a:	480b      	ldr	r0, [pc, #44]	; (8000278 <uart_communication_fsm+0x12c>)
 800024c:	f002 fd76 	bl	8002d3c <HAL_UART_Transmit>
		uartState = UART_IDLE;
 8000250:	4b04      	ldr	r3, [pc, #16]	; (8000264 <uart_communication_fsm+0x118>)
 8000252:	2200      	movs	r2, #0
 8000254:	701a      	strb	r2, [r3, #0]
		break;
 8000256:	e002      	b.n	800025e <uart_communication_fsm+0x112>
	default:
		break;
 8000258:	bf00      	nop
 800025a:	e000      	b.n	800025e <uart_communication_fsm+0x112>
		break;
 800025c:	bf00      	nop
	}
}
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	20000098 	.word	0x20000098
 8000268:	200000ec 	.word	0x200000ec
 800026c:	2000008c 	.word	0x2000008c
 8000270:	08004260 	.word	0x08004260
 8000274:	200000ac 	.word	0x200000ac
 8000278:	20000164 	.word	0x20000164
 800027c:	200001ac 	.word	0x200001ac
 8000280:	20000094 	.word	0x20000094
 8000284:	20000090 	.word	0x20000090
 8000288:	0800426c 	.word	0x0800426c
 800028c:	08004278 	.word	0x08004278

08000290 <command_parser_fsm>:

void command_parser_fsm(){
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
	switch(cmdState){
 8000294:	4ba1      	ldr	r3, [pc, #644]	; (800051c <command_parser_fsm+0x28c>)
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	2b08      	cmp	r3, #8
 800029a:	f200 81ad 	bhi.w	80005f8 <command_parser_fsm+0x368>
 800029e:	a201      	add	r2, pc, #4	; (adr r2, 80002a4 <command_parser_fsm+0x14>)
 80002a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002a4:	080002c9 	.word	0x080002c9
 80002a8:	08000385 	.word	0x08000385
 80002ac:	080003e9 	.word	0x080003e9
 80002b0:	0800044d 	.word	0x0800044d
 80002b4:	080004b7 	.word	0x080004b7
 80002b8:	08000531 	.word	0x08000531
 80002bc:	08000311 	.word	0x08000311
 80002c0:	08000595 	.word	0x08000595
 80002c4:	080005cb 	.word	0x080005cb
	case CMD_IDLE:
		if(cmdBuffer[cmd_content_index-1] == '!'){
 80002c8:	4b95      	ldr	r3, [pc, #596]	; (8000520 <command_parser_fsm+0x290>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	3b01      	subs	r3, #1
 80002ce:	4a95      	ldr	r2, [pc, #596]	; (8000524 <command_parser_fsm+0x294>)
 80002d0:	5cd3      	ldrb	r3, [r2, r3]
 80002d2:	2b21      	cmp	r3, #33	; 0x21
 80002d4:	d103      	bne.n	80002de <command_parser_fsm+0x4e>
			cmdState = CMD_EXCLAMATION;
 80002d6:	4b91      	ldr	r3, [pc, #580]	; (800051c <command_parser_fsm+0x28c>)
 80002d8:	2206      	movs	r2, #6
 80002da:	701a      	strb	r2, [r3, #0]
		else if(cmdBuffer[cmd_content_index-1] == '\r' || cmdBuffer[cmd_content_index-1] == '\n'){
			cmdState = CMD_IDLE;
			uartState = UART_ERROR;
			cmd_content_index = 0;
		}
		break;
 80002dc:	e18e      	b.n	80005fc <command_parser_fsm+0x36c>
		else if(cmdBuffer[cmd_content_index-1] == '\r' || cmdBuffer[cmd_content_index-1] == '\n'){
 80002de:	4b90      	ldr	r3, [pc, #576]	; (8000520 <command_parser_fsm+0x290>)
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	3b01      	subs	r3, #1
 80002e4:	4a8f      	ldr	r2, [pc, #572]	; (8000524 <command_parser_fsm+0x294>)
 80002e6:	5cd3      	ldrb	r3, [r2, r3]
 80002e8:	2b0d      	cmp	r3, #13
 80002ea:	d007      	beq.n	80002fc <command_parser_fsm+0x6c>
 80002ec:	4b8c      	ldr	r3, [pc, #560]	; (8000520 <command_parser_fsm+0x290>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	3b01      	subs	r3, #1
 80002f2:	4a8c      	ldr	r2, [pc, #560]	; (8000524 <command_parser_fsm+0x294>)
 80002f4:	5cd3      	ldrb	r3, [r2, r3]
 80002f6:	2b0a      	cmp	r3, #10
 80002f8:	f040 8180 	bne.w	80005fc <command_parser_fsm+0x36c>
			cmdState = CMD_IDLE;
 80002fc:	4b87      	ldr	r3, [pc, #540]	; (800051c <command_parser_fsm+0x28c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	701a      	strb	r2, [r3, #0]
			uartState = UART_ERROR;
 8000302:	4b89      	ldr	r3, [pc, #548]	; (8000528 <command_parser_fsm+0x298>)
 8000304:	2205      	movs	r2, #5
 8000306:	701a      	strb	r2, [r3, #0]
			cmd_content_index = 0;
 8000308:	4b85      	ldr	r3, [pc, #532]	; (8000520 <command_parser_fsm+0x290>)
 800030a:	2200      	movs	r2, #0
 800030c:	701a      	strb	r2, [r3, #0]
		break;
 800030e:	e175      	b.n	80005fc <command_parser_fsm+0x36c>
	case CMD_EXCLAMATION:
		if(cmdBuffer[cmd_content_index-1] == 'R'){
 8000310:	4b83      	ldr	r3, [pc, #524]	; (8000520 <command_parser_fsm+0x290>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	3b01      	subs	r3, #1
 8000316:	4a83      	ldr	r2, [pc, #524]	; (8000524 <command_parser_fsm+0x294>)
 8000318:	5cd3      	ldrb	r3, [r2, r3]
 800031a:	2b52      	cmp	r3, #82	; 0x52
 800031c:	d103      	bne.n	8000326 <command_parser_fsm+0x96>
			cmdState = CMD_R;
 800031e:	4b7f      	ldr	r3, [pc, #508]	; (800051c <command_parser_fsm+0x28c>)
 8000320:	2201      	movs	r2, #1
 8000322:	701a      	strb	r2, [r3, #0]
			uartState = UART_ERROR;
			cmd_content_index = 0;
		}else if(cmdBuffer[cmd_content_index-1] != '!'){
			cmdState = CMD_IDLE;
		}
		break;
 8000324:	e16c      	b.n	8000600 <command_parser_fsm+0x370>
		else if(cmdBuffer[cmd_content_index-1] == 'O'){
 8000326:	4b7e      	ldr	r3, [pc, #504]	; (8000520 <command_parser_fsm+0x290>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	3b01      	subs	r3, #1
 800032c:	4a7d      	ldr	r2, [pc, #500]	; (8000524 <command_parser_fsm+0x294>)
 800032e:	5cd3      	ldrb	r3, [r2, r3]
 8000330:	2b4f      	cmp	r3, #79	; 0x4f
 8000332:	d103      	bne.n	800033c <command_parser_fsm+0xac>
			cmdState = CMD_O;
 8000334:	4b79      	ldr	r3, [pc, #484]	; (800051c <command_parser_fsm+0x28c>)
 8000336:	2204      	movs	r2, #4
 8000338:	701a      	strb	r2, [r3, #0]
		break;
 800033a:	e161      	b.n	8000600 <command_parser_fsm+0x370>
		else if(cmdBuffer[cmd_content_index-1] == '\r' || cmdBuffer[cmd_content_index-1] == '\n'){
 800033c:	4b78      	ldr	r3, [pc, #480]	; (8000520 <command_parser_fsm+0x290>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	3b01      	subs	r3, #1
 8000342:	4a78      	ldr	r2, [pc, #480]	; (8000524 <command_parser_fsm+0x294>)
 8000344:	5cd3      	ldrb	r3, [r2, r3]
 8000346:	2b0d      	cmp	r3, #13
 8000348:	d006      	beq.n	8000358 <command_parser_fsm+0xc8>
 800034a:	4b75      	ldr	r3, [pc, #468]	; (8000520 <command_parser_fsm+0x290>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	3b01      	subs	r3, #1
 8000350:	4a74      	ldr	r2, [pc, #464]	; (8000524 <command_parser_fsm+0x294>)
 8000352:	5cd3      	ldrb	r3, [r2, r3]
 8000354:	2b0a      	cmp	r3, #10
 8000356:	d109      	bne.n	800036c <command_parser_fsm+0xdc>
			cmdState = CMD_IDLE;
 8000358:	4b70      	ldr	r3, [pc, #448]	; (800051c <command_parser_fsm+0x28c>)
 800035a:	2200      	movs	r2, #0
 800035c:	701a      	strb	r2, [r3, #0]
			uartState = UART_ERROR;
 800035e:	4b72      	ldr	r3, [pc, #456]	; (8000528 <command_parser_fsm+0x298>)
 8000360:	2205      	movs	r2, #5
 8000362:	701a      	strb	r2, [r3, #0]
			cmd_content_index = 0;
 8000364:	4b6e      	ldr	r3, [pc, #440]	; (8000520 <command_parser_fsm+0x290>)
 8000366:	2200      	movs	r2, #0
 8000368:	701a      	strb	r2, [r3, #0]
		break;
 800036a:	e149      	b.n	8000600 <command_parser_fsm+0x370>
		}else if(cmdBuffer[cmd_content_index-1] != '!'){
 800036c:	4b6c      	ldr	r3, [pc, #432]	; (8000520 <command_parser_fsm+0x290>)
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	3b01      	subs	r3, #1
 8000372:	4a6c      	ldr	r2, [pc, #432]	; (8000524 <command_parser_fsm+0x294>)
 8000374:	5cd3      	ldrb	r3, [r2, r3]
 8000376:	2b21      	cmp	r3, #33	; 0x21
 8000378:	f000 8142 	beq.w	8000600 <command_parser_fsm+0x370>
			cmdState = CMD_IDLE;
 800037c:	4b67      	ldr	r3, [pc, #412]	; (800051c <command_parser_fsm+0x28c>)
 800037e:	2200      	movs	r2, #0
 8000380:	701a      	strb	r2, [r3, #0]
		break;
 8000382:	e13d      	b.n	8000600 <command_parser_fsm+0x370>
	case CMD_R:
		if(cmdBuffer[cmd_content_index-1] == 'S'){
 8000384:	4b66      	ldr	r3, [pc, #408]	; (8000520 <command_parser_fsm+0x290>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	3b01      	subs	r3, #1
 800038a:	4a66      	ldr	r2, [pc, #408]	; (8000524 <command_parser_fsm+0x294>)
 800038c:	5cd3      	ldrb	r3, [r2, r3]
 800038e:	2b53      	cmp	r3, #83	; 0x53
 8000390:	d103      	bne.n	800039a <command_parser_fsm+0x10a>
			cmdState = CMD_S;
 8000392:	4b62      	ldr	r3, [pc, #392]	; (800051c <command_parser_fsm+0x28c>)
 8000394:	2202      	movs	r2, #2
 8000396:	701a      	strb	r2, [r3, #0]
				cmdState = CMD_EXCLAMATION;
			}else{
				cmdState = CMD_IDLE;
			}
		}
		break;
 8000398:	e135      	b.n	8000606 <command_parser_fsm+0x376>
		else if(cmdBuffer[cmd_content_index-1] == '\r' || cmdBuffer[cmd_content_index-1] == '\n'){
 800039a:	4b61      	ldr	r3, [pc, #388]	; (8000520 <command_parser_fsm+0x290>)
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	3b01      	subs	r3, #1
 80003a0:	4a60      	ldr	r2, [pc, #384]	; (8000524 <command_parser_fsm+0x294>)
 80003a2:	5cd3      	ldrb	r3, [r2, r3]
 80003a4:	2b0d      	cmp	r3, #13
 80003a6:	d006      	beq.n	80003b6 <command_parser_fsm+0x126>
 80003a8:	4b5d      	ldr	r3, [pc, #372]	; (8000520 <command_parser_fsm+0x290>)
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	3b01      	subs	r3, #1
 80003ae:	4a5d      	ldr	r2, [pc, #372]	; (8000524 <command_parser_fsm+0x294>)
 80003b0:	5cd3      	ldrb	r3, [r2, r3]
 80003b2:	2b0a      	cmp	r3, #10
 80003b4:	d109      	bne.n	80003ca <command_parser_fsm+0x13a>
			cmdState = CMD_IDLE;
 80003b6:	4b59      	ldr	r3, [pc, #356]	; (800051c <command_parser_fsm+0x28c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	701a      	strb	r2, [r3, #0]
			uartState = UART_ERROR;
 80003bc:	4b5a      	ldr	r3, [pc, #360]	; (8000528 <command_parser_fsm+0x298>)
 80003be:	2205      	movs	r2, #5
 80003c0:	701a      	strb	r2, [r3, #0]
			cmd_content_index = 0;
 80003c2:	4b57      	ldr	r3, [pc, #348]	; (8000520 <command_parser_fsm+0x290>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	701a      	strb	r2, [r3, #0]
		break;
 80003c8:	e11d      	b.n	8000606 <command_parser_fsm+0x376>
			if(cmdBuffer[cmd_content_index-1] == '!'){
 80003ca:	4b55      	ldr	r3, [pc, #340]	; (8000520 <command_parser_fsm+0x290>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	4a54      	ldr	r2, [pc, #336]	; (8000524 <command_parser_fsm+0x294>)
 80003d2:	5cd3      	ldrb	r3, [r2, r3]
 80003d4:	2b21      	cmp	r3, #33	; 0x21
 80003d6:	d103      	bne.n	80003e0 <command_parser_fsm+0x150>
				cmdState = CMD_EXCLAMATION;
 80003d8:	4b50      	ldr	r3, [pc, #320]	; (800051c <command_parser_fsm+0x28c>)
 80003da:	2206      	movs	r2, #6
 80003dc:	701a      	strb	r2, [r3, #0]
		break;
 80003de:	e112      	b.n	8000606 <command_parser_fsm+0x376>
				cmdState = CMD_IDLE;
 80003e0:	4b4e      	ldr	r3, [pc, #312]	; (800051c <command_parser_fsm+0x28c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	701a      	strb	r2, [r3, #0]
		break;
 80003e6:	e10e      	b.n	8000606 <command_parser_fsm+0x376>
	case CMD_S:
		if(cmdBuffer[cmd_content_index-1] == 'T'){
 80003e8:	4b4d      	ldr	r3, [pc, #308]	; (8000520 <command_parser_fsm+0x290>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	3b01      	subs	r3, #1
 80003ee:	4a4d      	ldr	r2, [pc, #308]	; (8000524 <command_parser_fsm+0x294>)
 80003f0:	5cd3      	ldrb	r3, [r2, r3]
 80003f2:	2b54      	cmp	r3, #84	; 0x54
 80003f4:	d103      	bne.n	80003fe <command_parser_fsm+0x16e>
			cmdState = CMD_T;
 80003f6:	4b49      	ldr	r3, [pc, #292]	; (800051c <command_parser_fsm+0x28c>)
 80003f8:	2203      	movs	r2, #3
 80003fa:	701a      	strb	r2, [r3, #0]
				cmdState = CMD_EXCLAMATION;
			}else{
				cmdState = CMD_IDLE;
			}
		}
		break;
 80003fc:	e103      	b.n	8000606 <command_parser_fsm+0x376>
		else if(cmdBuffer[cmd_content_index-1] == '\r' || cmdBuffer[cmd_content_index-1] == '\n'){
 80003fe:	4b48      	ldr	r3, [pc, #288]	; (8000520 <command_parser_fsm+0x290>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	3b01      	subs	r3, #1
 8000404:	4a47      	ldr	r2, [pc, #284]	; (8000524 <command_parser_fsm+0x294>)
 8000406:	5cd3      	ldrb	r3, [r2, r3]
 8000408:	2b0d      	cmp	r3, #13
 800040a:	d006      	beq.n	800041a <command_parser_fsm+0x18a>
 800040c:	4b44      	ldr	r3, [pc, #272]	; (8000520 <command_parser_fsm+0x290>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	3b01      	subs	r3, #1
 8000412:	4a44      	ldr	r2, [pc, #272]	; (8000524 <command_parser_fsm+0x294>)
 8000414:	5cd3      	ldrb	r3, [r2, r3]
 8000416:	2b0a      	cmp	r3, #10
 8000418:	d109      	bne.n	800042e <command_parser_fsm+0x19e>
			cmdState = CMD_IDLE;
 800041a:	4b40      	ldr	r3, [pc, #256]	; (800051c <command_parser_fsm+0x28c>)
 800041c:	2200      	movs	r2, #0
 800041e:	701a      	strb	r2, [r3, #0]
			uartState = UART_ERROR;
 8000420:	4b41      	ldr	r3, [pc, #260]	; (8000528 <command_parser_fsm+0x298>)
 8000422:	2205      	movs	r2, #5
 8000424:	701a      	strb	r2, [r3, #0]
			cmd_content_index = 0;
 8000426:	4b3e      	ldr	r3, [pc, #248]	; (8000520 <command_parser_fsm+0x290>)
 8000428:	2200      	movs	r2, #0
 800042a:	701a      	strb	r2, [r3, #0]
		break;
 800042c:	e0eb      	b.n	8000606 <command_parser_fsm+0x376>
			if(cmdBuffer[cmd_content_index-1] == '!'){
 800042e:	4b3c      	ldr	r3, [pc, #240]	; (8000520 <command_parser_fsm+0x290>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	3b01      	subs	r3, #1
 8000434:	4a3b      	ldr	r2, [pc, #236]	; (8000524 <command_parser_fsm+0x294>)
 8000436:	5cd3      	ldrb	r3, [r2, r3]
 8000438:	2b21      	cmp	r3, #33	; 0x21
 800043a:	d103      	bne.n	8000444 <command_parser_fsm+0x1b4>
				cmdState = CMD_EXCLAMATION;
 800043c:	4b37      	ldr	r3, [pc, #220]	; (800051c <command_parser_fsm+0x28c>)
 800043e:	2206      	movs	r2, #6
 8000440:	701a      	strb	r2, [r3, #0]
		break;
 8000442:	e0e0      	b.n	8000606 <command_parser_fsm+0x376>
				cmdState = CMD_IDLE;
 8000444:	4b35      	ldr	r3, [pc, #212]	; (800051c <command_parser_fsm+0x28c>)
 8000446:	2200      	movs	r2, #0
 8000448:	701a      	strb	r2, [r3, #0]
		break;
 800044a:	e0dc      	b.n	8000606 <command_parser_fsm+0x376>
	case CMD_T:
		if(cmdBuffer[cmd_content_index-1] == '#'){
 800044c:	4b34      	ldr	r3, [pc, #208]	; (8000520 <command_parser_fsm+0x290>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	3b01      	subs	r3, #1
 8000452:	4a34      	ldr	r2, [pc, #208]	; (8000524 <command_parser_fsm+0x294>)
 8000454:	5cd3      	ldrb	r3, [r2, r3]
 8000456:	2b23      	cmp	r3, #35	; 0x23
 8000458:	d106      	bne.n	8000468 <command_parser_fsm+0x1d8>
			cmdState = CMD_HASTAG_T;
 800045a:	4b30      	ldr	r3, [pc, #192]	; (800051c <command_parser_fsm+0x28c>)
 800045c:	2208      	movs	r2, #8
 800045e:	701a      	strb	r2, [r3, #0]
			isRST = 1;
 8000460:	4b32      	ldr	r3, [pc, #200]	; (800052c <command_parser_fsm+0x29c>)
 8000462:	2201      	movs	r2, #1
 8000464:	601a      	str	r2, [r3, #0]
				cmdState = CMD_EXCLAMATION;
			}else{
				cmdState = CMD_IDLE;
			}
		}
		break;
 8000466:	e0ce      	b.n	8000606 <command_parser_fsm+0x376>
		else if(cmdBuffer[cmd_content_index-1] == '\r' || cmdBuffer[cmd_content_index-1] == '\n'){
 8000468:	4b2d      	ldr	r3, [pc, #180]	; (8000520 <command_parser_fsm+0x290>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	3b01      	subs	r3, #1
 800046e:	4a2d      	ldr	r2, [pc, #180]	; (8000524 <command_parser_fsm+0x294>)
 8000470:	5cd3      	ldrb	r3, [r2, r3]
 8000472:	2b0d      	cmp	r3, #13
 8000474:	d006      	beq.n	8000484 <command_parser_fsm+0x1f4>
 8000476:	4b2a      	ldr	r3, [pc, #168]	; (8000520 <command_parser_fsm+0x290>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	3b01      	subs	r3, #1
 800047c:	4a29      	ldr	r2, [pc, #164]	; (8000524 <command_parser_fsm+0x294>)
 800047e:	5cd3      	ldrb	r3, [r2, r3]
 8000480:	2b0a      	cmp	r3, #10
 8000482:	d109      	bne.n	8000498 <command_parser_fsm+0x208>
			cmdState = CMD_IDLE;
 8000484:	4b25      	ldr	r3, [pc, #148]	; (800051c <command_parser_fsm+0x28c>)
 8000486:	2200      	movs	r2, #0
 8000488:	701a      	strb	r2, [r3, #0]
			uartState = UART_ERROR;
 800048a:	4b27      	ldr	r3, [pc, #156]	; (8000528 <command_parser_fsm+0x298>)
 800048c:	2205      	movs	r2, #5
 800048e:	701a      	strb	r2, [r3, #0]
			cmd_content_index = 0;
 8000490:	4b23      	ldr	r3, [pc, #140]	; (8000520 <command_parser_fsm+0x290>)
 8000492:	2200      	movs	r2, #0
 8000494:	701a      	strb	r2, [r3, #0]
		break;
 8000496:	e0b6      	b.n	8000606 <command_parser_fsm+0x376>
			if(cmdBuffer[cmd_content_index-1] == '!'){
 8000498:	4b21      	ldr	r3, [pc, #132]	; (8000520 <command_parser_fsm+0x290>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	3b01      	subs	r3, #1
 800049e:	4a21      	ldr	r2, [pc, #132]	; (8000524 <command_parser_fsm+0x294>)
 80004a0:	5cd3      	ldrb	r3, [r2, r3]
 80004a2:	2b21      	cmp	r3, #33	; 0x21
 80004a4:	d103      	bne.n	80004ae <command_parser_fsm+0x21e>
				cmdState = CMD_EXCLAMATION;
 80004a6:	4b1d      	ldr	r3, [pc, #116]	; (800051c <command_parser_fsm+0x28c>)
 80004a8:	2206      	movs	r2, #6
 80004aa:	701a      	strb	r2, [r3, #0]
		break;
 80004ac:	e0ab      	b.n	8000606 <command_parser_fsm+0x376>
				cmdState = CMD_IDLE;
 80004ae:	4b1b      	ldr	r3, [pc, #108]	; (800051c <command_parser_fsm+0x28c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	701a      	strb	r2, [r3, #0]
		break;
 80004b4:	e0a7      	b.n	8000606 <command_parser_fsm+0x376>
	case CMD_O:
		if(cmdBuffer[cmd_content_index-1] == 'K'){
 80004b6:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <command_parser_fsm+0x290>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	3b01      	subs	r3, #1
 80004bc:	4a19      	ldr	r2, [pc, #100]	; (8000524 <command_parser_fsm+0x294>)
 80004be:	5cd3      	ldrb	r3, [r2, r3]
 80004c0:	2b4b      	cmp	r3, #75	; 0x4b
 80004c2:	d103      	bne.n	80004cc <command_parser_fsm+0x23c>
			cmdState = CMD_K;
 80004c4:	4b15      	ldr	r3, [pc, #84]	; (800051c <command_parser_fsm+0x28c>)
 80004c6:	2205      	movs	r2, #5
 80004c8:	701a      	strb	r2, [r3, #0]
				cmdState = CMD_EXCLAMATION;
			}else{
				cmdState = CMD_IDLE;
			}
		}
		break;
 80004ca:	e09c      	b.n	8000606 <command_parser_fsm+0x376>
		else if(cmdBuffer[cmd_content_index-1] == '\r' || cmdBuffer[cmd_content_index-1] == '\n'){
 80004cc:	4b14      	ldr	r3, [pc, #80]	; (8000520 <command_parser_fsm+0x290>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	3b01      	subs	r3, #1
 80004d2:	4a14      	ldr	r2, [pc, #80]	; (8000524 <command_parser_fsm+0x294>)
 80004d4:	5cd3      	ldrb	r3, [r2, r3]
 80004d6:	2b0d      	cmp	r3, #13
 80004d8:	d006      	beq.n	80004e8 <command_parser_fsm+0x258>
 80004da:	4b11      	ldr	r3, [pc, #68]	; (8000520 <command_parser_fsm+0x290>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	3b01      	subs	r3, #1
 80004e0:	4a10      	ldr	r2, [pc, #64]	; (8000524 <command_parser_fsm+0x294>)
 80004e2:	5cd3      	ldrb	r3, [r2, r3]
 80004e4:	2b0a      	cmp	r3, #10
 80004e6:	d109      	bne.n	80004fc <command_parser_fsm+0x26c>
			cmdState = CMD_IDLE;
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <command_parser_fsm+0x28c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]
			uartState = UART_ERROR;
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <command_parser_fsm+0x298>)
 80004f0:	2205      	movs	r2, #5
 80004f2:	701a      	strb	r2, [r3, #0]
			cmd_content_index = 0;
 80004f4:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <command_parser_fsm+0x290>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	701a      	strb	r2, [r3, #0]
		break;
 80004fa:	e084      	b.n	8000606 <command_parser_fsm+0x376>
			if(cmdBuffer[cmd_content_index-1] == '!'){
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <command_parser_fsm+0x290>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	3b01      	subs	r3, #1
 8000502:	4a08      	ldr	r2, [pc, #32]	; (8000524 <command_parser_fsm+0x294>)
 8000504:	5cd3      	ldrb	r3, [r2, r3]
 8000506:	2b21      	cmp	r3, #33	; 0x21
 8000508:	d103      	bne.n	8000512 <command_parser_fsm+0x282>
				cmdState = CMD_EXCLAMATION;
 800050a:	4b04      	ldr	r3, [pc, #16]	; (800051c <command_parser_fsm+0x28c>)
 800050c:	2206      	movs	r2, #6
 800050e:	701a      	strb	r2, [r3, #0]
		break;
 8000510:	e079      	b.n	8000606 <command_parser_fsm+0x376>
				cmdState = CMD_IDLE;
 8000512:	4b02      	ldr	r3, [pc, #8]	; (800051c <command_parser_fsm+0x28c>)
 8000514:	2200      	movs	r2, #0
 8000516:	701a      	strb	r2, [r3, #0]
		break;
 8000518:	e075      	b.n	8000606 <command_parser_fsm+0x376>
 800051a:	bf00      	nop
 800051c:	20000099 	.word	0x20000099
 8000520:	2000009b 	.word	0x2000009b
 8000524:	200000cc 	.word	0x200000cc
 8000528:	20000098 	.word	0x20000098
 800052c:	20000090 	.word	0x20000090
	case CMD_K:
		if(cmdBuffer[cmd_content_index-1] == '#'){
 8000530:	4b37      	ldr	r3, [pc, #220]	; (8000610 <command_parser_fsm+0x380>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	3b01      	subs	r3, #1
 8000536:	4a37      	ldr	r2, [pc, #220]	; (8000614 <command_parser_fsm+0x384>)
 8000538:	5cd3      	ldrb	r3, [r2, r3]
 800053a:	2b23      	cmp	r3, #35	; 0x23
 800053c:	d103      	bne.n	8000546 <command_parser_fsm+0x2b6>
			cmdState = CMD_HASTAG_K;
 800053e:	4b36      	ldr	r3, [pc, #216]	; (8000618 <command_parser_fsm+0x388>)
 8000540:	2207      	movs	r2, #7
 8000542:	701a      	strb	r2, [r3, #0]
				cmdState = CMD_EXCLAMATION;
			}else{
				cmdState = CMD_IDLE;
			}
		}
		break;
 8000544:	e05f      	b.n	8000606 <command_parser_fsm+0x376>
		else if(cmdBuffer[cmd_content_index-1] == '\r' || cmdBuffer[cmd_content_index-1] == '\n'){
 8000546:	4b32      	ldr	r3, [pc, #200]	; (8000610 <command_parser_fsm+0x380>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	3b01      	subs	r3, #1
 800054c:	4a31      	ldr	r2, [pc, #196]	; (8000614 <command_parser_fsm+0x384>)
 800054e:	5cd3      	ldrb	r3, [r2, r3]
 8000550:	2b0d      	cmp	r3, #13
 8000552:	d006      	beq.n	8000562 <command_parser_fsm+0x2d2>
 8000554:	4b2e      	ldr	r3, [pc, #184]	; (8000610 <command_parser_fsm+0x380>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	3b01      	subs	r3, #1
 800055a:	4a2e      	ldr	r2, [pc, #184]	; (8000614 <command_parser_fsm+0x384>)
 800055c:	5cd3      	ldrb	r3, [r2, r3]
 800055e:	2b0a      	cmp	r3, #10
 8000560:	d109      	bne.n	8000576 <command_parser_fsm+0x2e6>
			cmdState = CMD_IDLE;
 8000562:	4b2d      	ldr	r3, [pc, #180]	; (8000618 <command_parser_fsm+0x388>)
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
			uartState = UART_ERROR;
 8000568:	4b2c      	ldr	r3, [pc, #176]	; (800061c <command_parser_fsm+0x38c>)
 800056a:	2205      	movs	r2, #5
 800056c:	701a      	strb	r2, [r3, #0]
			cmd_content_index = 0;
 800056e:	4b28      	ldr	r3, [pc, #160]	; (8000610 <command_parser_fsm+0x380>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
		break;
 8000574:	e047      	b.n	8000606 <command_parser_fsm+0x376>
			if(cmdBuffer[cmd_content_index-1] == '!'){
 8000576:	4b26      	ldr	r3, [pc, #152]	; (8000610 <command_parser_fsm+0x380>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	3b01      	subs	r3, #1
 800057c:	4a25      	ldr	r2, [pc, #148]	; (8000614 <command_parser_fsm+0x384>)
 800057e:	5cd3      	ldrb	r3, [r2, r3]
 8000580:	2b21      	cmp	r3, #33	; 0x21
 8000582:	d103      	bne.n	800058c <command_parser_fsm+0x2fc>
				cmdState = CMD_EXCLAMATION;
 8000584:	4b24      	ldr	r3, [pc, #144]	; (8000618 <command_parser_fsm+0x388>)
 8000586:	2206      	movs	r2, #6
 8000588:	701a      	strb	r2, [r3, #0]
		break;
 800058a:	e03c      	b.n	8000606 <command_parser_fsm+0x376>
				cmdState = CMD_IDLE;
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <command_parser_fsm+0x388>)
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
		break;
 8000592:	e038      	b.n	8000606 <command_parser_fsm+0x376>
	case CMD_HASTAG_K:
		if(cmdBuffer[cmd_content_index-1] == '\r' || cmdBuffer[cmd_content_index-1] == '\n'){
 8000594:	4b1e      	ldr	r3, [pc, #120]	; (8000610 <command_parser_fsm+0x380>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	3b01      	subs	r3, #1
 800059a:	4a1e      	ldr	r2, [pc, #120]	; (8000614 <command_parser_fsm+0x384>)
 800059c:	5cd3      	ldrb	r3, [r2, r3]
 800059e:	2b0d      	cmp	r3, #13
 80005a0:	d006      	beq.n	80005b0 <command_parser_fsm+0x320>
 80005a2:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <command_parser_fsm+0x380>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	3b01      	subs	r3, #1
 80005a8:	4a1a      	ldr	r2, [pc, #104]	; (8000614 <command_parser_fsm+0x384>)
 80005aa:	5cd3      	ldrb	r3, [r2, r3]
 80005ac:	2b0a      	cmp	r3, #10
 80005ae:	d129      	bne.n	8000604 <command_parser_fsm+0x374>
			isOK = 1;
 80005b0:	4b1b      	ldr	r3, [pc, #108]	; (8000620 <command_parser_fsm+0x390>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	601a      	str	r2, [r3, #0]
			uartState = UART_WAIT_OK;
 80005b6:	4b19      	ldr	r3, [pc, #100]	; (800061c <command_parser_fsm+0x38c>)
 80005b8:	2202      	movs	r2, #2
 80005ba:	701a      	strb	r2, [r3, #0]
			cmd_content_index = 0;
 80005bc:	4b14      	ldr	r3, [pc, #80]	; (8000610 <command_parser_fsm+0x380>)
 80005be:	2200      	movs	r2, #0
 80005c0:	701a      	strb	r2, [r3, #0]
			cmdState = CMD_IDLE;
 80005c2:	4b15      	ldr	r3, [pc, #84]	; (8000618 <command_parser_fsm+0x388>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
		}
		break;
 80005c8:	e01c      	b.n	8000604 <command_parser_fsm+0x374>
	case CMD_HASTAG_T:
		if(cmdBuffer[cmd_content_index-1] == '\r' || cmdBuffer[cmd_content_index-1] == '\n'){
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <command_parser_fsm+0x380>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	3b01      	subs	r3, #1
 80005d0:	4a10      	ldr	r2, [pc, #64]	; (8000614 <command_parser_fsm+0x384>)
 80005d2:	5cd3      	ldrb	r3, [r2, r3]
 80005d4:	2b0d      	cmp	r3, #13
 80005d6:	d006      	beq.n	80005e6 <command_parser_fsm+0x356>
 80005d8:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <command_parser_fsm+0x380>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	3b01      	subs	r3, #1
 80005de:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <command_parser_fsm+0x384>)
 80005e0:	5cd3      	ldrb	r3, [r2, r3]
 80005e2:	2b0a      	cmp	r3, #10
 80005e4:	d108      	bne.n	80005f8 <command_parser_fsm+0x368>
			uartState = UART_RST;
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <command_parser_fsm+0x38c>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	701a      	strb	r2, [r3, #0]
			cmdState = CMD_IDLE;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <command_parser_fsm+0x388>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
			cmd_content_index = 0;
 80005f2:	4b07      	ldr	r3, [pc, #28]	; (8000610 <command_parser_fsm+0x380>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
		}
	default:
		break;
 80005f8:	bf00      	nop
 80005fa:	e004      	b.n	8000606 <command_parser_fsm+0x376>
		break;
 80005fc:	bf00      	nop
 80005fe:	e002      	b.n	8000606 <command_parser_fsm+0x376>
		break;
 8000600:	bf00      	nop
 8000602:	e000      	b.n	8000606 <command_parser_fsm+0x376>
		break;
 8000604:	bf00      	nop
	}
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	2000009b 	.word	0x2000009b
 8000614:	200000cc 	.word	0x200000cc
 8000618:	20000099 	.word	0x20000099
 800061c:	20000098 	.word	0x20000098
 8000620:	20000094 	.word	0x20000094

08000624 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
uint8_t cmdBuffer[CMD_CONTENT_MAX_LENGTH];
uint8_t buffer_flag = 0;
uint8_t cmd_content_index = 0;
uint8_t tempValue = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a13      	ldr	r2, [pc, #76]	; (8000680 <HAL_UART_RxCpltCallback+0x5c>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d11f      	bne.n	8000676 <HAL_UART_RxCpltCallback+0x52>
		HAL_UART_Transmit(&huart2, &tempValue, 1, 50);
 8000636:	2332      	movs	r3, #50	; 0x32
 8000638:	2201      	movs	r2, #1
 800063a:	4912      	ldr	r1, [pc, #72]	; (8000684 <HAL_UART_RxCpltCallback+0x60>)
 800063c:	4812      	ldr	r0, [pc, #72]	; (8000688 <HAL_UART_RxCpltCallback+0x64>)
 800063e:	f002 fb7d 	bl	8002d3c <HAL_UART_Transmit>
		cmdBuffer[cmd_content_index++] = tempValue;
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <HAL_UART_RxCpltCallback+0x68>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	1c5a      	adds	r2, r3, #1
 8000648:	b2d1      	uxtb	r1, r2
 800064a:	4a10      	ldr	r2, [pc, #64]	; (800068c <HAL_UART_RxCpltCallback+0x68>)
 800064c:	7011      	strb	r1, [r2, #0]
 800064e:	461a      	mov	r2, r3
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <HAL_UART_RxCpltCallback+0x60>)
 8000652:	7819      	ldrb	r1, [r3, #0]
 8000654:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <HAL_UART_RxCpltCallback+0x6c>)
 8000656:	5499      	strb	r1, [r3, r2]
		buffer_flag = 1;
 8000658:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <HAL_UART_RxCpltCallback+0x70>)
 800065a:	2201      	movs	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
		if(cmd_content_index >= CMD_CONTENT_MAX_LENGTH){
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <HAL_UART_RxCpltCallback+0x68>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b1d      	cmp	r3, #29
 8000664:	d902      	bls.n	800066c <HAL_UART_RxCpltCallback+0x48>
			cmd_content_index = 0 ;
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <HAL_UART_RxCpltCallback+0x68>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, &tempValue, 1);
 800066c:	2201      	movs	r2, #1
 800066e:	4905      	ldr	r1, [pc, #20]	; (8000684 <HAL_UART_RxCpltCallback+0x60>)
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <HAL_UART_RxCpltCallback+0x64>)
 8000672:	f002 fbee 	bl	8002e52 <HAL_UART_Receive_IT>
	}
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40004400 	.word	0x40004400
 8000684:	2000009c 	.word	0x2000009c
 8000688:	20000164 	.word	0x20000164
 800068c:	2000009b 	.word	0x2000009b
 8000690:	200000cc 	.word	0x200000cc
 8000694:	2000009a 	.word	0x2000009a

08000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08e      	sub	sp, #56	; 0x38
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069e:	f000 fb69 	bl	8000d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a2:	f000 f84f 	bl	8000744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a6:	f000 f951 	bl	800094c <MX_GPIO_Init>
  MX_ADC1_Init();
 80006aa:	f000 f89b 	bl	80007e4 <MX_ADC1_Init>
  MX_TIM2_Init();
 80006ae:	f000 f8d7 	bl	8000860 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80006b2:	f000 f921 	bl	80008f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //char response[RESPONSE_LENGTH];
  HAL_TIM_Base_Start_IT(&htim2);
 80006b6:	481b      	ldr	r0, [pc, #108]	; (8000724 <main+0x8c>)
 80006b8:	f001 ff64 	bl	8002584 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT (&huart2, &tempValue, 1);
 80006bc:	2201      	movs	r2, #1
 80006be:	491a      	ldr	r1, [pc, #104]	; (8000728 <main+0x90>)
 80006c0:	481a      	ldr	r0, [pc, #104]	; (800072c <main+0x94>)
 80006c2:	f002 fbc6 	bl	8002e52 <HAL_UART_Receive_IT>
  HAL_ADC_Start(&hadc1);
 80006c6:	481a      	ldr	r0, [pc, #104]	; (8000730 <main+0x98>)
 80006c8:	f000 fc8e 	bl	8000fe8 <HAL_ADC_Start>

  char welcome[50];
  int length = sprintf(welcome, "STARTING STM32 UART LAB5\r\n");
 80006cc:	463b      	mov	r3, r7
 80006ce:	4919      	ldr	r1, [pc, #100]	; (8000734 <main+0x9c>)
 80006d0:	4618      	mov	r0, r3
 80006d2:	f003 f97f 	bl	80039d4 <siprintf>
 80006d6:	6378      	str	r0, [r7, #52]	; 0x34
  HAL_UART_Transmit(&huart2, (void *)welcome, length, 50);
 80006d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006da:	b29a      	uxth	r2, r3
 80006dc:	4639      	mov	r1, r7
 80006de:	2332      	movs	r3, #50	; 0x32
 80006e0:	4812      	ldr	r0, [pc, #72]	; (800072c <main+0x94>)
 80006e2:	f002 fb2b 	bl	8002d3c <HAL_UART_Transmit>
  setTimers(2, 500);
 80006e6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80006ea:	2002      	movs	r0, #2
 80006ec:	f000 f970 	bl	80009d0 <setTimers>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(timer_flags[2] == 1){
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <main+0xa0>)
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d108      	bne.n	800070a <main+0x72>
		  setTimers(2, 500);
 80006f8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80006fc:	2002      	movs	r0, #2
 80006fe:	f000 f967 	bl	80009d0 <setTimers>
		  HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000702:	2120      	movs	r1, #32
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <main+0xa4>)
 8000706:	f001 fa0f 	bl	8001b28 <HAL_GPIO_TogglePin>
	  }
	  if(buffer_flag == 1){
 800070a:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <main+0xa8>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b01      	cmp	r3, #1
 8000710:	d104      	bne.n	800071c <main+0x84>
		  command_parser_fsm();
 8000712:	f7ff fdbd 	bl	8000290 <command_parser_fsm>
		  buffer_flag = 0;
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <main+0xa8>)
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
	  }
	  uart_communication_fsm();
 800071c:	f7ff fd16 	bl	800014c <uart_communication_fsm>
	  if(timer_flags[2] == 1){
 8000720:	e7e6      	b.n	80006f0 <main+0x58>
 8000722:	bf00      	nop
 8000724:	2000011c 	.word	0x2000011c
 8000728:	2000009c 	.word	0x2000009c
 800072c:	20000164 	.word	0x20000164
 8000730:	200000ec 	.word	0x200000ec
 8000734:	08004298 	.word	0x08004298
 8000738:	200001ac 	.word	0x200001ac
 800073c:	40010800 	.word	0x40010800
 8000740:	2000009a 	.word	0x2000009a

08000744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	; 0x50
 8000748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800074e:	2228      	movs	r2, #40	; 0x28
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f003 f936 	bl	80039c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000774:	2302      	movs	r3, #2
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077c:	2310      	movs	r3, #16
 800077e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000780:	2300      	movs	r3, #0
 8000782:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000788:	4618      	mov	r0, r3
 800078a:	f001 f9e7 	bl	8001b5c <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000794:	f000 f916 	bl	80009c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	230f      	movs	r3, #15
 800079a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 fc52 	bl	800205c <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80007be:	f000 f901 	bl	80009c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007c2:	2302      	movs	r3, #2
 80007c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	4618      	mov	r0, r3
 80007ce:	f001 fdd3 	bl	8002378 <HAL_RCCEx_PeriphCLKConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007d8:	f000 f8f4 	bl	80009c4 <Error_Handler>
  }
}
 80007dc:	bf00      	nop
 80007de:	3750      	adds	r7, #80	; 0x50
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_ADC1_Init+0x74>)
 80007f6:	4a19      	ldr	r2, [pc, #100]	; (800085c <MX_ADC1_Init+0x78>)
 80007f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_ADC1_Init+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_ADC1_Init+0x74>)
 8000802:	2201      	movs	r2, #1
 8000804:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_ADC1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_ADC1_Init+0x74>)
 800080e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000812:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_ADC1_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_ADC1_Init+0x74>)
 800081c:	2201      	movs	r2, #1
 800081e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000820:	480d      	ldr	r0, [pc, #52]	; (8000858 <MX_ADC1_Init+0x74>)
 8000822:	f000 fb09 	bl	8000e38 <HAL_ADC_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800082c:	f000 f8ca 	bl	80009c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000834:	2301      	movs	r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	4619      	mov	r1, r3
 8000840:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_ADC1_Init+0x74>)
 8000842:	f000 fc8b 	bl	800115c <HAL_ADC_ConfigChannel>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800084c:	f000 f8ba 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200000ec 	.word	0x200000ec
 800085c:	40012400 	.word	0x40012400

08000860 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000874:	463b      	mov	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <MX_TIM2_Init+0x94>)
 800087e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000882:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <MX_TIM2_Init+0x94>)
 8000886:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800088a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088c:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_TIM2_Init+0x94>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_TIM2_Init+0x94>)
 8000894:	2209      	movs	r2, #9
 8000896:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MX_TIM2_Init+0x94>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_TIM2_Init+0x94>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008a4:	4813      	ldr	r0, [pc, #76]	; (80008f4 <MX_TIM2_Init+0x94>)
 80008a6:	f001 fe1d 	bl	80024e4 <HAL_TIM_Base_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008b0:	f000 f888 	bl	80009c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	4619      	mov	r1, r3
 80008c0:	480c      	ldr	r0, [pc, #48]	; (80008f4 <MX_TIM2_Init+0x94>)
 80008c2:	f001 ff9b 	bl	80027fc <HAL_TIM_ConfigClockSource>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008cc:	f000 f87a 	bl	80009c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d0:	2300      	movs	r3, #0
 80008d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_TIM2_Init+0x94>)
 80008de:	f002 f973 	bl	8002bc8 <HAL_TIMEx_MasterConfigSynchronization>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008e8:	f000 f86c 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	2000011c 	.word	0x2000011c

080008f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <MX_USART2_UART_Init+0x50>)
 8000900:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 8000904:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000908:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 8000930:	f002 f9b4 	bl	8002c9c <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800093a:	f000 f843 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000164 	.word	0x20000164
 8000948:	40004400 	.word	0x40004400

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 0308 	add.w	r3, r7, #8
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_GPIO_Init+0x5c>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a10      	ldr	r2, [pc, #64]	; (80009a8 <MX_GPIO_Init+0x5c>)
 8000966:	f043 0304 	orr.w	r3, r3, #4
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_GPIO_Init+0x5c>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f003 0304 	and.w	r3, r3, #4
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	2120      	movs	r1, #32
 800097c:	480b      	ldr	r0, [pc, #44]	; (80009ac <MX_GPIO_Init+0x60>)
 800097e:	f001 f8bb 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000982:	2320      	movs	r3, #32
 8000984:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2302      	movs	r3, #2
 8000990:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	4619      	mov	r1, r3
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_GPIO_Init+0x60>)
 800099a:	f000 ff33 	bl	8001804 <HAL_GPIO_Init>

}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40010800 	.word	0x40010800

080009b0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	runTimer();
 80009b8:	f000 f82a 	bl	8000a10 <runTimer>
}
 80009bc:	bf00      	nop
 80009be:	3708      	adds	r7, #8
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	e7fe      	b.n	80009cc <Error_Handler+0x8>
	...

080009d0 <setTimers>:
#include <software_timer.h>

int timer_flags[5];
int timerCounters[5];

void setTimers(int index, int duration){
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
	timerCounters[index] = duration/TICH;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	4a09      	ldr	r2, [pc, #36]	; (8000a04 <setTimers+0x34>)
 80009de:	fb82 1203 	smull	r1, r2, r2, r3
 80009e2:	1092      	asrs	r2, r2, #2
 80009e4:	17db      	asrs	r3, r3, #31
 80009e6:	1ad2      	subs	r2, r2, r3
 80009e8:	4907      	ldr	r1, [pc, #28]	; (8000a08 <setTimers+0x38>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flags[index] = 0;
 80009f0:	4a06      	ldr	r2, [pc, #24]	; (8000a0c <setTimers+0x3c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2100      	movs	r1, #0
 80009f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	66666667 	.word	0x66666667
 8000a08:	200001c0 	.word	0x200001c0
 8000a0c:	200001ac 	.word	0x200001ac

08000a10 <runTimer>:

void runTimer(){
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
	for(int i = 0; i < 5; i++){
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	e01c      	b.n	8000a56 <runTimer+0x46>
		if(timerCounters[i] > 0){
 8000a1c:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <runTimer+0x58>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	dd13      	ble.n	8000a50 <runTimer+0x40>
			timerCounters[i]--;
 8000a28:	4a0f      	ldr	r2, [pc, #60]	; (8000a68 <runTimer+0x58>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a30:	1e5a      	subs	r2, r3, #1
 8000a32:	490d      	ldr	r1, [pc, #52]	; (8000a68 <runTimer+0x58>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timerCounters[i] <= 0){
 8000a3a:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <runTimer+0x58>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	dc04      	bgt.n	8000a50 <runTimer+0x40>
				timer_flags[i] = 1;
 8000a46:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <runTimer+0x5c>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < 5; i++){
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3301      	adds	r3, #1
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	dddf      	ble.n	8000a1c <runTimer+0xc>
			}
		}
	}
}
 8000a5c:	bf00      	nop
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	200001c0 	.word	0x200001c0
 8000a6c:	200001ac 	.word	0x200001ac

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <HAL_MspInit+0x5c>)
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	4a14      	ldr	r2, [pc, #80]	; (8000acc <HAL_MspInit+0x5c>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6193      	str	r3, [r2, #24]
 8000a82:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_MspInit+0x5c>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	4b0f      	ldr	r3, [pc, #60]	; (8000acc <HAL_MspInit+0x5c>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <HAL_MspInit+0x5c>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a98:	61d3      	str	r3, [r2, #28]
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <HAL_MspInit+0x5c>)
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <HAL_MspInit+0x60>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <HAL_MspInit+0x60>)
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	40010000 	.word	0x40010000

08000ad4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <HAL_ADC_MspInit+0x6c>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d121      	bne.n	8000b38 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <HAL_ADC_MspInit+0x70>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <HAL_ADC_MspInit+0x70>)
 8000afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_ADC_MspInit+0x70>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_ADC_MspInit+0x70>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	4a0c      	ldr	r2, [pc, #48]	; (8000b44 <HAL_ADC_MspInit+0x70>)
 8000b12:	f043 0304 	orr.w	r3, r3, #4
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <HAL_ADC_MspInit+0x70>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b24:	2301      	movs	r3, #1
 8000b26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4619      	mov	r1, r3
 8000b32:	4805      	ldr	r0, [pc, #20]	; (8000b48 <HAL_ADC_MspInit+0x74>)
 8000b34:	f000 fe66 	bl	8001804 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b38:	bf00      	nop
 8000b3a:	3720      	adds	r7, #32
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40012400 	.word	0x40012400
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010800 	.word	0x40010800

08000b4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b5c:	d113      	bne.n	8000b86 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_TIM_Base_MspInit+0x44>)
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <HAL_TIM_Base_MspInit+0x44>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	61d3      	str	r3, [r2, #28]
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_TIM_Base_MspInit+0x44>)
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2100      	movs	r1, #0
 8000b7a:	201c      	movs	r0, #28
 8000b7c:	f000 fd59 	bl	8001632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b80:	201c      	movs	r0, #28
 8000b82:	f000 fd72 	bl	800166a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b088      	sub	sp, #32
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <HAL_UART_MspInit+0x98>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d137      	bne.n	8000c24 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb4:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <HAL_UART_MspInit+0x9c>)
 8000bb6:	69db      	ldr	r3, [r3, #28]
 8000bb8:	4a1d      	ldr	r2, [pc, #116]	; (8000c30 <HAL_UART_MspInit+0x9c>)
 8000bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbe:	61d3      	str	r3, [r2, #28]
 8000bc0:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <HAL_UART_MspInit+0x9c>)
 8000bc2:	69db      	ldr	r3, [r3, #28]
 8000bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bcc:	4b18      	ldr	r3, [pc, #96]	; (8000c30 <HAL_UART_MspInit+0x9c>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a17      	ldr	r2, [pc, #92]	; (8000c30 <HAL_UART_MspInit+0x9c>)
 8000bd2:	f043 0304 	orr.w	r3, r3, #4
 8000bd6:	6193      	str	r3, [r2, #24]
 8000bd8:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_UART_MspInit+0x9c>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f003 0304 	and.w	r3, r3, #4
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000be4:	2304      	movs	r3, #4
 8000be6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	f107 0310 	add.w	r3, r7, #16
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	480f      	ldr	r0, [pc, #60]	; (8000c34 <HAL_UART_MspInit+0xa0>)
 8000bf8:	f000 fe04 	bl	8001804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	f107 0310 	add.w	r3, r7, #16
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4809      	ldr	r0, [pc, #36]	; (8000c34 <HAL_UART_MspInit+0xa0>)
 8000c10:	f000 fdf8 	bl	8001804 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2100      	movs	r1, #0
 8000c18:	2026      	movs	r0, #38	; 0x26
 8000c1a:	f000 fd0a 	bl	8001632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c1e:	2026      	movs	r0, #38	; 0x26
 8000c20:	f000 fd23 	bl	800166a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c24:	bf00      	nop
 8000c26:	3720      	adds	r7, #32
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40004400 	.word	0x40004400
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010800 	.word	0x40010800

08000c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <NMI_Handler+0x4>

08000c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr

08000c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr

08000c7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c7e:	f000 f8bf 	bl	8000e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <TIM2_IRQHandler+0x10>)
 8000c8e:	f001 fcc5 	bl	800261c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2000011c 	.word	0x2000011c

08000c9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <USART2_IRQHandler+0x10>)
 8000ca2:	f002 f8fb 	bl	8002e9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000164 	.word	0x20000164

08000cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb8:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <_sbrk+0x5c>)
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <_sbrk+0x60>)
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <_sbrk+0x64>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d102      	bne.n	8000cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <_sbrk+0x64>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <_sbrk+0x68>)
 8000cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d207      	bcs.n	8000cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ce0:	f002 fe46 	bl	8003970 <__errno>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295
 8000cee:	e009      	b.n	8000d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	4a05      	ldr	r2, [pc, #20]	; (8000d14 <_sbrk+0x64>)
 8000d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d02:	68fb      	ldr	r3, [r7, #12]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20002800 	.word	0x20002800
 8000d10:	00000400 	.word	0x00000400
 8000d14:	200000a0 	.word	0x200000a0
 8000d18:	200001e8 	.word	0x200001e8

08000d1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr

08000d28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d28:	f7ff fff8 	bl	8000d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d2c:	480b      	ldr	r0, [pc, #44]	; (8000d5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d2e:	490c      	ldr	r1, [pc, #48]	; (8000d60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d30:	4a0c      	ldr	r2, [pc, #48]	; (8000d64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a09      	ldr	r2, [pc, #36]	; (8000d68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d44:	4c09      	ldr	r4, [pc, #36]	; (8000d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d52:	f002 fe13 	bl	800397c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d56:	f7ff fc9f 	bl	8000698 <main>
  bx lr
 8000d5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d60:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d64:	0800431c 	.word	0x0800431c
  ldr r2, =_sbss
 8000d68:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d6c:	200001e8 	.word	0x200001e8

08000d70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC1_2_IRQHandler>
	...

08000d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <HAL_Init+0x28>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <HAL_Init+0x28>)
 8000d7e:	f043 0310 	orr.w	r3, r3, #16
 8000d82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f000 fc49 	bl	800161c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8a:	200f      	movs	r0, #15
 8000d8c:	f000 f808 	bl	8000da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d90:	f7ff fe6e 	bl	8000a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40022000 	.word	0x40022000

08000da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_InitTick+0x54>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_InitTick+0x58>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 fc61 	bl	8001686 <HAL_SYSTICK_Config>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00e      	b.n	8000dec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b0f      	cmp	r3, #15
 8000dd2:	d80a      	bhi.n	8000dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f000 fc29 	bl	8001632 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de0:	4a06      	ldr	r2, [pc, #24]	; (8000dfc <HAL_InitTick+0x5c>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e000      	b.n	8000dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000000 	.word	0x20000000
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000004 	.word	0x20000004

08000e00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <HAL_IncTick+0x1c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <HAL_IncTick+0x20>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a03      	ldr	r2, [pc, #12]	; (8000e20 <HAL_IncTick+0x20>)
 8000e12:	6013      	str	r3, [r2, #0]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	200001d4 	.word	0x200001d4

08000e24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;
 8000e28:	4b02      	ldr	r3, [pc, #8]	; (8000e34 <HAL_GetTick+0x10>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr
 8000e34:	200001d4 	.word	0x200001d4

08000e38 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e40:	2300      	movs	r3, #0
 8000e42:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d101      	bne.n	8000e5a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e0be      	b.n	8000fd8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d109      	bne.n	8000e7c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff fe2c 	bl	8000ad4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f000 fabf 	bl	8001400 <ADC_ConversionStop_Disable>
 8000e82:	4603      	mov	r3, r0
 8000e84:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8a:	f003 0310 	and.w	r3, r3, #16
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f040 8099 	bne.w	8000fc6 <HAL_ADC_Init+0x18e>
 8000e94:	7dfb      	ldrb	r3, [r7, #23]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f040 8095 	bne.w	8000fc6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ea4:	f023 0302 	bic.w	r3, r3, #2
 8000ea8:	f043 0202 	orr.w	r2, r3, #2
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000eb8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	7b1b      	ldrb	r3, [r3, #12]
 8000ebe:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ec0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ec2:	68ba      	ldr	r2, [r7, #8]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ed0:	d003      	beq.n	8000eda <HAL_ADC_Init+0xa2>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d102      	bne.n	8000ee0 <HAL_ADC_Init+0xa8>
 8000eda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ede:	e000      	b.n	8000ee2 <HAL_ADC_Init+0xaa>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	7d1b      	ldrb	r3, [r3, #20]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d119      	bne.n	8000f24 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	7b1b      	ldrb	r3, [r3, #12]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d109      	bne.n	8000f0c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	3b01      	subs	r3, #1
 8000efe:	035a      	lsls	r2, r3, #13
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	e00b      	b.n	8000f24 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f10:	f043 0220 	orr.w	r2, r3, #32
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1c:	f043 0201 	orr.w	r2, r3, #1
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	430a      	orrs	r2, r1
 8000f36:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <HAL_ADC_Init+0x1a8>)
 8000f40:	4013      	ands	r3, r2
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	6812      	ldr	r2, [r2, #0]
 8000f46:	68b9      	ldr	r1, [r7, #8]
 8000f48:	430b      	orrs	r3, r1
 8000f4a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f54:	d003      	beq.n	8000f5e <HAL_ADC_Init+0x126>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d104      	bne.n	8000f68 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	051b      	lsls	r3, r3, #20
 8000f66:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	689a      	ldr	r2, [r3, #8]
 8000f82:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <HAL_ADC_Init+0x1ac>)
 8000f84:	4013      	ands	r3, r2
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d10b      	bne.n	8000fa4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f96:	f023 0303 	bic.w	r3, r3, #3
 8000f9a:	f043 0201 	orr.w	r2, r3, #1
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fa2:	e018      	b.n	8000fd6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa8:	f023 0312 	bic.w	r3, r3, #18
 8000fac:	f043 0210 	orr.w	r2, r3, #16
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb8:	f043 0201 	orr.w	r2, r3, #1
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fc4:	e007      	b.n	8000fd6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fca:	f043 0210 	orr.w	r2, r3, #16
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	ffe1f7fd 	.word	0xffe1f7fd
 8000fe4:	ff1f0efe 	.word	0xff1f0efe

08000fe8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d101      	bne.n	8001002 <HAL_ADC_Start+0x1a>
 8000ffe:	2302      	movs	r3, #2
 8001000:	e098      	b.n	8001134 <HAL_ADC_Start+0x14c>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2201      	movs	r2, #1
 8001006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f99e 	bl	800134c <ADC_Enable>
 8001010:	4603      	mov	r3, r0
 8001012:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	2b00      	cmp	r3, #0
 8001018:	f040 8087 	bne.w	800112a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001024:	f023 0301 	bic.w	r3, r3, #1
 8001028:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a41      	ldr	r2, [pc, #260]	; (800113c <HAL_ADC_Start+0x154>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d105      	bne.n	8001046 <HAL_ADC_Start+0x5e>
 800103a:	4b41      	ldr	r3, [pc, #260]	; (8001140 <HAL_ADC_Start+0x158>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d115      	bne.n	8001072 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800105c:	2b00      	cmp	r3, #0
 800105e:	d026      	beq.n	80010ae <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001064:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001068:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001070:	e01d      	b.n	80010ae <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001076:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a2f      	ldr	r2, [pc, #188]	; (8001140 <HAL_ADC_Start+0x158>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d004      	beq.n	8001092 <HAL_ADC_Start+0xaa>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a2b      	ldr	r2, [pc, #172]	; (800113c <HAL_ADC_Start+0x154>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d10d      	bne.n	80010ae <HAL_ADC_Start+0xc6>
 8001092:	4b2b      	ldr	r3, [pc, #172]	; (8001140 <HAL_ADC_Start+0x158>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800109a:	2b00      	cmp	r3, #0
 800109c:	d007      	beq.n	80010ae <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d006      	beq.n	80010c8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010be:	f023 0206 	bic.w	r2, r3, #6
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80010c6:	e002      	b.n	80010ce <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f06f 0202 	mvn.w	r2, #2
 80010de:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80010ea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80010ee:	d113      	bne.n	8001118 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80010f4:	4a11      	ldr	r2, [pc, #68]	; (800113c <HAL_ADC_Start+0x154>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d105      	bne.n	8001106 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <HAL_ADC_Start+0x158>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001102:	2b00      	cmp	r3, #0
 8001104:	d108      	bne.n	8001118 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	e00c      	b.n	8001132 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	e003      	b.n	8001132 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001132:	7bfb      	ldrb	r3, [r7, #15]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40012800 	.word	0x40012800
 8001140:	40012400 	.word	0x40012400

08001144 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001166:	2300      	movs	r3, #0
 8001168:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001174:	2b01      	cmp	r3, #1
 8001176:	d101      	bne.n	800117c <HAL_ADC_ConfigChannel+0x20>
 8001178:	2302      	movs	r3, #2
 800117a:	e0dc      	b.n	8001336 <HAL_ADC_ConfigChannel+0x1da>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2201      	movs	r2, #1
 8001180:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b06      	cmp	r3, #6
 800118a:	d81c      	bhi.n	80011c6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	3b05      	subs	r3, #5
 800119e:	221f      	movs	r2, #31
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	4019      	ands	r1, r3
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	6818      	ldr	r0, [r3, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	4613      	mov	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	3b05      	subs	r3, #5
 80011b8:	fa00 f203 	lsl.w	r2, r0, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	430a      	orrs	r2, r1
 80011c2:	635a      	str	r2, [r3, #52]	; 0x34
 80011c4:	e03c      	b.n	8001240 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b0c      	cmp	r3, #12
 80011cc:	d81c      	bhi.n	8001208 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	4613      	mov	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	3b23      	subs	r3, #35	; 0x23
 80011e0:	221f      	movs	r2, #31
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	4019      	ands	r1, r3
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	6818      	ldr	r0, [r3, #0]
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	3b23      	subs	r3, #35	; 0x23
 80011fa:	fa00 f203 	lsl.w	r2, r0, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	430a      	orrs	r2, r1
 8001204:	631a      	str	r2, [r3, #48]	; 0x30
 8001206:	e01b      	b.n	8001240 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	3b41      	subs	r3, #65	; 0x41
 800121a:	221f      	movs	r2, #31
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	4019      	ands	r1, r3
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	6818      	ldr	r0, [r3, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	4613      	mov	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	3b41      	subs	r3, #65	; 0x41
 8001234:	fa00 f203 	lsl.w	r2, r0, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	430a      	orrs	r2, r1
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b09      	cmp	r3, #9
 8001246:	d91c      	bls.n	8001282 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68d9      	ldr	r1, [r3, #12]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	4613      	mov	r3, r2
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	4413      	add	r3, r2
 8001258:	3b1e      	subs	r3, #30
 800125a:	2207      	movs	r2, #7
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	4019      	ands	r1, r3
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	6898      	ldr	r0, [r3, #8]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4613      	mov	r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	4413      	add	r3, r2
 8001272:	3b1e      	subs	r3, #30
 8001274:	fa00 f203 	lsl.w	r2, r0, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	430a      	orrs	r2, r1
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	e019      	b.n	80012b6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6919      	ldr	r1, [r3, #16]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4613      	mov	r3, r2
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	4413      	add	r3, r2
 8001292:	2207      	movs	r2, #7
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	4019      	ands	r1, r3
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	6898      	ldr	r0, [r3, #8]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4613      	mov	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4413      	add	r3, r2
 80012aa:	fa00 f203 	lsl.w	r2, r0, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b10      	cmp	r3, #16
 80012bc:	d003      	beq.n	80012c6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012c2:	2b11      	cmp	r3, #17
 80012c4:	d132      	bne.n	800132c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a1d      	ldr	r2, [pc, #116]	; (8001340 <HAL_ADC_ConfigChannel+0x1e4>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d125      	bne.n	800131c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d126      	bne.n	800132c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80012ec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b10      	cmp	r3, #16
 80012f4:	d11a      	bne.n	800132c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012f6:	4b13      	ldr	r3, [pc, #76]	; (8001344 <HAL_ADC_ConfigChannel+0x1e8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a13      	ldr	r2, [pc, #76]	; (8001348 <HAL_ADC_ConfigChannel+0x1ec>)
 80012fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001300:	0c9a      	lsrs	r2, r3, #18
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800130c:	e002      	b.n	8001314 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	3b01      	subs	r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f9      	bne.n	800130e <HAL_ADC_ConfigChannel+0x1b2>
 800131a:	e007      	b.n	800132c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001320:	f043 0220 	orr.w	r2, r3, #32
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001334:	7bfb      	ldrb	r3, [r7, #15]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3714      	adds	r7, #20
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	40012400 	.word	0x40012400
 8001344:	20000000 	.word	0x20000000
 8001348:	431bde83 	.word	0x431bde83

0800134c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b01      	cmp	r3, #1
 8001368:	d040      	beq.n	80013ec <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f042 0201 	orr.w	r2, r2, #1
 8001378:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800137a:	4b1f      	ldr	r3, [pc, #124]	; (80013f8 <ADC_Enable+0xac>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a1f      	ldr	r2, [pc, #124]	; (80013fc <ADC_Enable+0xb0>)
 8001380:	fba2 2303 	umull	r2, r3, r2, r3
 8001384:	0c9b      	lsrs	r3, r3, #18
 8001386:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001388:	e002      	b.n	8001390 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	3b01      	subs	r3, #1
 800138e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f9      	bne.n	800138a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001396:	f7ff fd45 	bl	8000e24 <HAL_GetTick>
 800139a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800139c:	e01f      	b.n	80013de <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800139e:	f7ff fd41 	bl	8000e24 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d918      	bls.n	80013de <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d011      	beq.n	80013de <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013be:	f043 0210 	orr.w	r2, r3, #16
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ca:	f043 0201 	orr.w	r2, r3, #1
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e007      	b.n	80013ee <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d1d8      	bne.n	800139e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000000 	.word	0x20000000
 80013fc:	431bde83 	.word	0x431bde83

08001400 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b01      	cmp	r3, #1
 8001418:	d12e      	bne.n	8001478 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0201 	bic.w	r2, r2, #1
 8001428:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800142a:	f7ff fcfb 	bl	8000e24 <HAL_GetTick>
 800142e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001430:	e01b      	b.n	800146a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001432:	f7ff fcf7 	bl	8000e24 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d914      	bls.n	800146a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	2b01      	cmp	r3, #1
 800144c:	d10d      	bne.n	800146a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001452:	f043 0210 	orr.w	r2, r3, #16
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145e:	f043 0201 	orr.w	r2, r3, #1
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e007      	b.n	800147a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b01      	cmp	r3, #1
 8001476:	d0dc      	beq.n	8001432 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a0:	4013      	ands	r3, r2
 80014a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b6:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	60d3      	str	r3, [r2, #12]
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <__NVIC_GetPriorityGrouping+0x18>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	f003 0307 	and.w	r3, r3, #7
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	db0b      	blt.n	8001512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	f003 021f 	and.w	r2, r3, #31
 8001500:	4906      	ldr	r1, [pc, #24]	; (800151c <__NVIC_EnableIRQ+0x34>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	095b      	lsrs	r3, r3, #5
 8001508:	2001      	movs	r0, #1
 800150a:	fa00 f202 	lsl.w	r2, r0, r2
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	e000e100 	.word	0xe000e100

08001520 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	6039      	str	r1, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	db0a      	blt.n	800154a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	b2da      	uxtb	r2, r3
 8001538:	490c      	ldr	r1, [pc, #48]	; (800156c <__NVIC_SetPriority+0x4c>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	0112      	lsls	r2, r2, #4
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	440b      	add	r3, r1
 8001544:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001548:	e00a      	b.n	8001560 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4908      	ldr	r1, [pc, #32]	; (8001570 <__NVIC_SetPriority+0x50>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	3b04      	subs	r3, #4
 8001558:	0112      	lsls	r2, r2, #4
 800155a:	b2d2      	uxtb	r2, r2
 800155c:	440b      	add	r3, r1
 800155e:	761a      	strb	r2, [r3, #24]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001574:	b480      	push	{r7}
 8001576:	b089      	sub	sp, #36	; 0x24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f1c3 0307 	rsb	r3, r3, #7
 800158e:	2b04      	cmp	r3, #4
 8001590:	bf28      	it	cs
 8001592:	2304      	movcs	r3, #4
 8001594:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3304      	adds	r3, #4
 800159a:	2b06      	cmp	r3, #6
 800159c:	d902      	bls.n	80015a4 <NVIC_EncodePriority+0x30>
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3b03      	subs	r3, #3
 80015a2:	e000      	b.n	80015a6 <NVIC_EncodePriority+0x32>
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43da      	mvns	r2, r3
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	401a      	ands	r2, r3
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa01 f303 	lsl.w	r3, r1, r3
 80015c6:	43d9      	mvns	r1, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015cc:	4313      	orrs	r3, r2
         );
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3724      	adds	r7, #36	; 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr

080015d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e8:	d301      	bcc.n	80015ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00f      	b.n	800160e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ee:	4a0a      	ldr	r2, [pc, #40]	; (8001618 <SysTick_Config+0x40>)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f6:	210f      	movs	r1, #15
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	f7ff ff90 	bl	8001520 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <SysTick_Config+0x40>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001606:	4b04      	ldr	r3, [pc, #16]	; (8001618 <SysTick_Config+0x40>)
 8001608:	2207      	movs	r2, #7
 800160a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	e000e010 	.word	0xe000e010

0800161c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ff2d 	bl	8001484 <__NVIC_SetPriorityGrouping>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001632:	b580      	push	{r7, lr}
 8001634:	b086      	sub	sp, #24
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	607a      	str	r2, [r7, #4]
 800163e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001644:	f7ff ff42 	bl	80014cc <__NVIC_GetPriorityGrouping>
 8001648:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	68b9      	ldr	r1, [r7, #8]
 800164e:	6978      	ldr	r0, [r7, #20]
 8001650:	f7ff ff90 	bl	8001574 <NVIC_EncodePriority>
 8001654:	4602      	mov	r2, r0
 8001656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff5f 	bl	8001520 <__NVIC_SetPriority>
}
 8001662:	bf00      	nop
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff35 	bl	80014e8 <__NVIC_EnableIRQ>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ffa2 	bl	80015d8 <SysTick_Config>
 8001694:	4603      	mov	r3, r0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800169e:	b480      	push	{r7}
 80016a0:	b085      	sub	sp, #20
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d008      	beq.n	80016c8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2204      	movs	r2, #4
 80016ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e020      	b.n	800170a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 020e 	bic.w	r2, r2, #14
 80016d6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0201 	bic.w	r2, r2, #1
 80016e6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f0:	2101      	movs	r1, #1
 80016f2:	fa01 f202 	lsl.w	r2, r1, r2
 80016f6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001708:	7bfb      	ldrb	r3, [r7, #15]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr

08001714 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d005      	beq.n	8001738 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2204      	movs	r2, #4
 8001730:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	73fb      	strb	r3, [r7, #15]
 8001736:	e051      	b.n	80017dc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 020e 	bic.w	r2, r2, #14
 8001746:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0201 	bic.w	r2, r2, #1
 8001756:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a22      	ldr	r2, [pc, #136]	; (80017e8 <HAL_DMA_Abort_IT+0xd4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d029      	beq.n	80017b6 <HAL_DMA_Abort_IT+0xa2>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a21      	ldr	r2, [pc, #132]	; (80017ec <HAL_DMA_Abort_IT+0xd8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d022      	beq.n	80017b2 <HAL_DMA_Abort_IT+0x9e>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a1f      	ldr	r2, [pc, #124]	; (80017f0 <HAL_DMA_Abort_IT+0xdc>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d01a      	beq.n	80017ac <HAL_DMA_Abort_IT+0x98>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a1e      	ldr	r2, [pc, #120]	; (80017f4 <HAL_DMA_Abort_IT+0xe0>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d012      	beq.n	80017a6 <HAL_DMA_Abort_IT+0x92>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a1c      	ldr	r2, [pc, #112]	; (80017f8 <HAL_DMA_Abort_IT+0xe4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d00a      	beq.n	80017a0 <HAL_DMA_Abort_IT+0x8c>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a1b      	ldr	r2, [pc, #108]	; (80017fc <HAL_DMA_Abort_IT+0xe8>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d102      	bne.n	800179a <HAL_DMA_Abort_IT+0x86>
 8001794:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001798:	e00e      	b.n	80017b8 <HAL_DMA_Abort_IT+0xa4>
 800179a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800179e:	e00b      	b.n	80017b8 <HAL_DMA_Abort_IT+0xa4>
 80017a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a4:	e008      	b.n	80017b8 <HAL_DMA_Abort_IT+0xa4>
 80017a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017aa:	e005      	b.n	80017b8 <HAL_DMA_Abort_IT+0xa4>
 80017ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b0:	e002      	b.n	80017b8 <HAL_DMA_Abort_IT+0xa4>
 80017b2:	2310      	movs	r3, #16
 80017b4:	e000      	b.n	80017b8 <HAL_DMA_Abort_IT+0xa4>
 80017b6:	2301      	movs	r3, #1
 80017b8:	4a11      	ldr	r2, [pc, #68]	; (8001800 <HAL_DMA_Abort_IT+0xec>)
 80017ba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	4798      	blx	r3
    } 
  }
  return status;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40020008 	.word	0x40020008
 80017ec:	4002001c 	.word	0x4002001c
 80017f0:	40020030 	.word	0x40020030
 80017f4:	40020044 	.word	0x40020044
 80017f8:	40020058 	.word	0x40020058
 80017fc:	4002006c 	.word	0x4002006c
 8001800:	40020000 	.word	0x40020000

08001804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001804:	b480      	push	{r7}
 8001806:	b08b      	sub	sp, #44	; 0x2c
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001812:	2300      	movs	r3, #0
 8001814:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001816:	e148      	b.n	8001aaa <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001818:	2201      	movs	r2, #1
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	69fa      	ldr	r2, [r7, #28]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	429a      	cmp	r2, r3
 8001832:	f040 8137 	bne.w	8001aa4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4aa3      	ldr	r2, [pc, #652]	; (8001ac8 <HAL_GPIO_Init+0x2c4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d05e      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 8001840:	4aa1      	ldr	r2, [pc, #644]	; (8001ac8 <HAL_GPIO_Init+0x2c4>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d875      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 8001846:	4aa1      	ldr	r2, [pc, #644]	; (8001acc <HAL_GPIO_Init+0x2c8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d058      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 800184c:	4a9f      	ldr	r2, [pc, #636]	; (8001acc <HAL_GPIO_Init+0x2c8>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d86f      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 8001852:	4a9f      	ldr	r2, [pc, #636]	; (8001ad0 <HAL_GPIO_Init+0x2cc>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d052      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 8001858:	4a9d      	ldr	r2, [pc, #628]	; (8001ad0 <HAL_GPIO_Init+0x2cc>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d869      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 800185e:	4a9d      	ldr	r2, [pc, #628]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d04c      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 8001864:	4a9b      	ldr	r2, [pc, #620]	; (8001ad4 <HAL_GPIO_Init+0x2d0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d863      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 800186a:	4a9b      	ldr	r2, [pc, #620]	; (8001ad8 <HAL_GPIO_Init+0x2d4>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d046      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
 8001870:	4a99      	ldr	r2, [pc, #612]	; (8001ad8 <HAL_GPIO_Init+0x2d4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d85d      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 8001876:	2b12      	cmp	r3, #18
 8001878:	d82a      	bhi.n	80018d0 <HAL_GPIO_Init+0xcc>
 800187a:	2b12      	cmp	r3, #18
 800187c:	d859      	bhi.n	8001932 <HAL_GPIO_Init+0x12e>
 800187e:	a201      	add	r2, pc, #4	; (adr r2, 8001884 <HAL_GPIO_Init+0x80>)
 8001880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001884:	080018ff 	.word	0x080018ff
 8001888:	080018d9 	.word	0x080018d9
 800188c:	080018eb 	.word	0x080018eb
 8001890:	0800192d 	.word	0x0800192d
 8001894:	08001933 	.word	0x08001933
 8001898:	08001933 	.word	0x08001933
 800189c:	08001933 	.word	0x08001933
 80018a0:	08001933 	.word	0x08001933
 80018a4:	08001933 	.word	0x08001933
 80018a8:	08001933 	.word	0x08001933
 80018ac:	08001933 	.word	0x08001933
 80018b0:	08001933 	.word	0x08001933
 80018b4:	08001933 	.word	0x08001933
 80018b8:	08001933 	.word	0x08001933
 80018bc:	08001933 	.word	0x08001933
 80018c0:	08001933 	.word	0x08001933
 80018c4:	08001933 	.word	0x08001933
 80018c8:	080018e1 	.word	0x080018e1
 80018cc:	080018f5 	.word	0x080018f5
 80018d0:	4a82      	ldr	r2, [pc, #520]	; (8001adc <HAL_GPIO_Init+0x2d8>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d013      	beq.n	80018fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018d6:	e02c      	b.n	8001932 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	623b      	str	r3, [r7, #32]
          break;
 80018de:	e029      	b.n	8001934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	3304      	adds	r3, #4
 80018e6:	623b      	str	r3, [r7, #32]
          break;
 80018e8:	e024      	b.n	8001934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	3308      	adds	r3, #8
 80018f0:	623b      	str	r3, [r7, #32]
          break;
 80018f2:	e01f      	b.n	8001934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	330c      	adds	r3, #12
 80018fa:	623b      	str	r3, [r7, #32]
          break;
 80018fc:	e01a      	b.n	8001934 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d102      	bne.n	800190c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001906:	2304      	movs	r3, #4
 8001908:	623b      	str	r3, [r7, #32]
          break;
 800190a:	e013      	b.n	8001934 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d105      	bne.n	8001920 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001914:	2308      	movs	r3, #8
 8001916:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69fa      	ldr	r2, [r7, #28]
 800191c:	611a      	str	r2, [r3, #16]
          break;
 800191e:	e009      	b.n	8001934 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001920:	2308      	movs	r3, #8
 8001922:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69fa      	ldr	r2, [r7, #28]
 8001928:	615a      	str	r2, [r3, #20]
          break;
 800192a:	e003      	b.n	8001934 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
          break;
 8001930:	e000      	b.n	8001934 <HAL_GPIO_Init+0x130>
          break;
 8001932:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2bff      	cmp	r3, #255	; 0xff
 8001938:	d801      	bhi.n	800193e <HAL_GPIO_Init+0x13a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	e001      	b.n	8001942 <HAL_GPIO_Init+0x13e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3304      	adds	r3, #4
 8001942:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2bff      	cmp	r3, #255	; 0xff
 8001948:	d802      	bhi.n	8001950 <HAL_GPIO_Init+0x14c>
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	e002      	b.n	8001956 <HAL_GPIO_Init+0x152>
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	3b08      	subs	r3, #8
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	210f      	movs	r1, #15
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	fa01 f303 	lsl.w	r3, r1, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	401a      	ands	r2, r3
 8001968:	6a39      	ldr	r1, [r7, #32]
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	fa01 f303 	lsl.w	r3, r1, r3
 8001970:	431a      	orrs	r2, r3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 8090 	beq.w	8001aa4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001984:	4b56      	ldr	r3, [pc, #344]	; (8001ae0 <HAL_GPIO_Init+0x2dc>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4a55      	ldr	r2, [pc, #340]	; (8001ae0 <HAL_GPIO_Init+0x2dc>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	6193      	str	r3, [r2, #24]
 8001990:	4b53      	ldr	r3, [pc, #332]	; (8001ae0 <HAL_GPIO_Init+0x2dc>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800199c:	4a51      	ldr	r2, [pc, #324]	; (8001ae4 <HAL_GPIO_Init+0x2e0>)
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	089b      	lsrs	r3, r3, #2
 80019a2:	3302      	adds	r3, #2
 80019a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	220f      	movs	r2, #15
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	4013      	ands	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a49      	ldr	r2, [pc, #292]	; (8001ae8 <HAL_GPIO_Init+0x2e4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d00d      	beq.n	80019e4 <HAL_GPIO_Init+0x1e0>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a48      	ldr	r2, [pc, #288]	; (8001aec <HAL_GPIO_Init+0x2e8>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d007      	beq.n	80019e0 <HAL_GPIO_Init+0x1dc>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a47      	ldr	r2, [pc, #284]	; (8001af0 <HAL_GPIO_Init+0x2ec>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d101      	bne.n	80019dc <HAL_GPIO_Init+0x1d8>
 80019d8:	2302      	movs	r3, #2
 80019da:	e004      	b.n	80019e6 <HAL_GPIO_Init+0x1e2>
 80019dc:	2303      	movs	r3, #3
 80019de:	e002      	b.n	80019e6 <HAL_GPIO_Init+0x1e2>
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <HAL_GPIO_Init+0x1e2>
 80019e4:	2300      	movs	r3, #0
 80019e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e8:	f002 0203 	and.w	r2, r2, #3
 80019ec:	0092      	lsls	r2, r2, #2
 80019ee:	4093      	lsls	r3, r2
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019f6:	493b      	ldr	r1, [pc, #236]	; (8001ae4 <HAL_GPIO_Init+0x2e0>)
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	089b      	lsrs	r3, r3, #2
 80019fc:	3302      	adds	r3, #2
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d006      	beq.n	8001a1e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a10:	4b38      	ldr	r3, [pc, #224]	; (8001af4 <HAL_GPIO_Init+0x2f0>)
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	4937      	ldr	r1, [pc, #220]	; (8001af4 <HAL_GPIO_Init+0x2f0>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	608b      	str	r3, [r1, #8]
 8001a1c:	e006      	b.n	8001a2c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a1e:	4b35      	ldr	r3, [pc, #212]	; (8001af4 <HAL_GPIO_Init+0x2f0>)
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	4933      	ldr	r1, [pc, #204]	; (8001af4 <HAL_GPIO_Init+0x2f0>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d006      	beq.n	8001a46 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a38:	4b2e      	ldr	r3, [pc, #184]	; (8001af4 <HAL_GPIO_Init+0x2f0>)
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	492d      	ldr	r1, [pc, #180]	; (8001af4 <HAL_GPIO_Init+0x2f0>)
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	60cb      	str	r3, [r1, #12]
 8001a44:	e006      	b.n	8001a54 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a46:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <HAL_GPIO_Init+0x2f0>)
 8001a48:	68da      	ldr	r2, [r3, #12]
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	4929      	ldr	r1, [pc, #164]	; (8001af4 <HAL_GPIO_Init+0x2f0>)
 8001a50:	4013      	ands	r3, r2
 8001a52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d006      	beq.n	8001a6e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a60:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <HAL_GPIO_Init+0x2f0>)
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	4923      	ldr	r1, [pc, #140]	; (8001af4 <HAL_GPIO_Init+0x2f0>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]
 8001a6c:	e006      	b.n	8001a7c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a6e:	4b21      	ldr	r3, [pc, #132]	; (8001af4 <HAL_GPIO_Init+0x2f0>)
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	43db      	mvns	r3, r3
 8001a76:	491f      	ldr	r1, [pc, #124]	; (8001af4 <HAL_GPIO_Init+0x2f0>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d006      	beq.n	8001a96 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a88:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <HAL_GPIO_Init+0x2f0>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4919      	ldr	r1, [pc, #100]	; (8001af4 <HAL_GPIO_Init+0x2f0>)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	600b      	str	r3, [r1, #0]
 8001a94:	e006      	b.n	8001aa4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a96:	4b17      	ldr	r3, [pc, #92]	; (8001af4 <HAL_GPIO_Init+0x2f0>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	4915      	ldr	r1, [pc, #84]	; (8001af4 <HAL_GPIO_Init+0x2f0>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f47f aeaf 	bne.w	8001818 <HAL_GPIO_Init+0x14>
  }
}
 8001aba:	bf00      	nop
 8001abc:	bf00      	nop
 8001abe:	372c      	adds	r7, #44	; 0x2c
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	10320000 	.word	0x10320000
 8001acc:	10310000 	.word	0x10310000
 8001ad0:	10220000 	.word	0x10220000
 8001ad4:	10210000 	.word	0x10210000
 8001ad8:	10120000 	.word	0x10120000
 8001adc:	10110000 	.word	0x10110000
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40010000 	.word	0x40010000
 8001ae8:	40010800 	.word	0x40010800
 8001aec:	40010c00 	.word	0x40010c00
 8001af0:	40011000 	.word	0x40011000
 8001af4:	40010400 	.word	0x40010400

08001af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	807b      	strh	r3, [r7, #2]
 8001b04:	4613      	mov	r3, r2
 8001b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b08:	787b      	ldrb	r3, [r7, #1]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b0e:	887a      	ldrh	r2, [r7, #2]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b14:	e003      	b.n	8001b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b16:	887b      	ldrh	r3, [r7, #2]
 8001b18:	041a      	lsls	r2, r3, #16
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	611a      	str	r2, [r3, #16]
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b3a:	887a      	ldrh	r2, [r7, #2]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	041a      	lsls	r2, r3, #16
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	43d9      	mvns	r1, r3
 8001b46:	887b      	ldrh	r3, [r7, #2]
 8001b48:	400b      	ands	r3, r1
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	611a      	str	r2, [r3, #16]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
	...

08001b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e26c      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 8087 	beq.w	8001c8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b7c:	4b92      	ldr	r3, [pc, #584]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 030c 	and.w	r3, r3, #12
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d00c      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b88:	4b8f      	ldr	r3, [pc, #572]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 030c 	and.w	r3, r3, #12
 8001b90:	2b08      	cmp	r3, #8
 8001b92:	d112      	bne.n	8001bba <HAL_RCC_OscConfig+0x5e>
 8001b94:	4b8c      	ldr	r3, [pc, #560]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba0:	d10b      	bne.n	8001bba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba2:	4b89      	ldr	r3, [pc, #548]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d06c      	beq.n	8001c88 <HAL_RCC_OscConfig+0x12c>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d168      	bne.n	8001c88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e246      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc2:	d106      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x76>
 8001bc4:	4b80      	ldr	r3, [pc, #512]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a7f      	ldr	r2, [pc, #508]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	e02e      	b.n	8001c30 <HAL_RCC_OscConfig+0xd4>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x98>
 8001bda:	4b7b      	ldr	r3, [pc, #492]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a7a      	ldr	r2, [pc, #488]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	4b78      	ldr	r3, [pc, #480]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a77      	ldr	r2, [pc, #476]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e01d      	b.n	8001c30 <HAL_RCC_OscConfig+0xd4>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bfc:	d10c      	bne.n	8001c18 <HAL_RCC_OscConfig+0xbc>
 8001bfe:	4b72      	ldr	r3, [pc, #456]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a71      	ldr	r2, [pc, #452]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	4b6f      	ldr	r3, [pc, #444]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a6e      	ldr	r2, [pc, #440]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	e00b      	b.n	8001c30 <HAL_RCC_OscConfig+0xd4>
 8001c18:	4b6b      	ldr	r3, [pc, #428]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a6a      	ldr	r2, [pc, #424]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	4b68      	ldr	r3, [pc, #416]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a67      	ldr	r2, [pc, #412]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d013      	beq.n	8001c60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7ff f8f4 	bl	8000e24 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c40:	f7ff f8f0 	bl	8000e24 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	; 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e1fa      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c52:	4b5d      	ldr	r3, [pc, #372]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0xe4>
 8001c5e:	e014      	b.n	8001c8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c60:	f7ff f8e0 	bl	8000e24 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c68:	f7ff f8dc 	bl	8000e24 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b64      	cmp	r3, #100	; 0x64
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e1e6      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c7a:	4b53      	ldr	r3, [pc, #332]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x10c>
 8001c86:	e000      	b.n	8001c8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d063      	beq.n	8001d5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c96:	4b4c      	ldr	r3, [pc, #304]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00b      	beq.n	8001cba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ca2:	4b49      	ldr	r3, [pc, #292]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 030c 	and.w	r3, r3, #12
 8001caa:	2b08      	cmp	r3, #8
 8001cac:	d11c      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x18c>
 8001cae:	4b46      	ldr	r3, [pc, #280]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d116      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cba:	4b43      	ldr	r3, [pc, #268]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d005      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x176>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d001      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e1ba      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	4939      	ldr	r1, [pc, #228]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ce6:	e03a      	b.n	8001d5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d020      	beq.n	8001d32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf0:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf6:	f7ff f895 	bl	8000e24 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cfe:	f7ff f891 	bl	8000e24 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e19b      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d10:	4b2d      	ldr	r3, [pc, #180]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0f0      	beq.n	8001cfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4927      	ldr	r1, [pc, #156]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	600b      	str	r3, [r1, #0]
 8001d30:	e015      	b.n	8001d5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d32:	4b26      	ldr	r3, [pc, #152]	; (8001dcc <HAL_RCC_OscConfig+0x270>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d38:	f7ff f874 	bl	8000e24 <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d40:	f7ff f870 	bl	8000e24 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e17a      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d52:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d03a      	beq.n	8001de0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d019      	beq.n	8001da6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d78:	f7ff f854 	bl	8000e24 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d80:	f7ff f850 	bl	8000e24 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e15a      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d92:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f000 facc 	bl	800233c <RCC_Delay>
 8001da4:	e01c      	b.n	8001de0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da6:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <HAL_RCC_OscConfig+0x274>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dac:	f7ff f83a 	bl	8000e24 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db2:	e00f      	b.n	8001dd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db4:	f7ff f836 	bl	8000e24 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d908      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e140      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
 8001dc6:	bf00      	nop
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	42420000 	.word	0x42420000
 8001dd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd4:	4b9e      	ldr	r3, [pc, #632]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1e9      	bne.n	8001db4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 80a6 	beq.w	8001f3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df2:	4b97      	ldr	r3, [pc, #604]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10d      	bne.n	8001e1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfe:	4b94      	ldr	r3, [pc, #592]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	4a93      	ldr	r2, [pc, #588]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e08:	61d3      	str	r3, [r2, #28]
 8001e0a:	4b91      	ldr	r3, [pc, #580]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001e0c:	69db      	ldr	r3, [r3, #28]
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e16:	2301      	movs	r3, #1
 8001e18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1a:	4b8e      	ldr	r3, [pc, #568]	; (8002054 <HAL_RCC_OscConfig+0x4f8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d118      	bne.n	8001e58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e26:	4b8b      	ldr	r3, [pc, #556]	; (8002054 <HAL_RCC_OscConfig+0x4f8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a8a      	ldr	r2, [pc, #552]	; (8002054 <HAL_RCC_OscConfig+0x4f8>)
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e32:	f7fe fff7 	bl	8000e24 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3a:	f7fe fff3 	bl	8000e24 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b64      	cmp	r3, #100	; 0x64
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e0fd      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4c:	4b81      	ldr	r3, [pc, #516]	; (8002054 <HAL_RCC_OscConfig+0x4f8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d106      	bne.n	8001e6e <HAL_RCC_OscConfig+0x312>
 8001e60:	4b7b      	ldr	r3, [pc, #492]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4a7a      	ldr	r2, [pc, #488]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	6213      	str	r3, [r2, #32]
 8001e6c:	e02d      	b.n	8001eca <HAL_RCC_OscConfig+0x36e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x334>
 8001e76:	4b76      	ldr	r3, [pc, #472]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	4a75      	ldr	r2, [pc, #468]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	6213      	str	r3, [r2, #32]
 8001e82:	4b73      	ldr	r3, [pc, #460]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	4a72      	ldr	r2, [pc, #456]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001e88:	f023 0304 	bic.w	r3, r3, #4
 8001e8c:	6213      	str	r3, [r2, #32]
 8001e8e:	e01c      	b.n	8001eca <HAL_RCC_OscConfig+0x36e>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	2b05      	cmp	r3, #5
 8001e96:	d10c      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x356>
 8001e98:	4b6d      	ldr	r3, [pc, #436]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	4a6c      	ldr	r2, [pc, #432]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	6213      	str	r3, [r2, #32]
 8001ea4:	4b6a      	ldr	r3, [pc, #424]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	4a69      	ldr	r2, [pc, #420]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6213      	str	r3, [r2, #32]
 8001eb0:	e00b      	b.n	8001eca <HAL_RCC_OscConfig+0x36e>
 8001eb2:	4b67      	ldr	r3, [pc, #412]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	4a66      	ldr	r2, [pc, #408]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	f023 0301 	bic.w	r3, r3, #1
 8001ebc:	6213      	str	r3, [r2, #32]
 8001ebe:	4b64      	ldr	r3, [pc, #400]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4a63      	ldr	r2, [pc, #396]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	f023 0304 	bic.w	r3, r3, #4
 8001ec8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d015      	beq.n	8001efe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed2:	f7fe ffa7 	bl	8000e24 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed8:	e00a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eda:	f7fe ffa3 	bl	8000e24 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e0ab      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef0:	4b57      	ldr	r3, [pc, #348]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d0ee      	beq.n	8001eda <HAL_RCC_OscConfig+0x37e>
 8001efc:	e014      	b.n	8001f28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efe:	f7fe ff91 	bl	8000e24 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f04:	e00a      	b.n	8001f1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f06:	f7fe ff8d 	bl	8000e24 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e095      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f1c:	4b4c      	ldr	r3, [pc, #304]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1ee      	bne.n	8001f06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f28:	7dfb      	ldrb	r3, [r7, #23]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d105      	bne.n	8001f3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f2e:	4b48      	ldr	r3, [pc, #288]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	4a47      	ldr	r2, [pc, #284]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 8081 	beq.w	8002046 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f44:	4b42      	ldr	r3, [pc, #264]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 030c 	and.w	r3, r3, #12
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d061      	beq.n	8002014 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d146      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f58:	4b3f      	ldr	r3, [pc, #252]	; (8002058 <HAL_RCC_OscConfig+0x4fc>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5e:	f7fe ff61 	bl	8000e24 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f66:	f7fe ff5d 	bl	8000e24 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e067      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f78:	4b35      	ldr	r3, [pc, #212]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1f0      	bne.n	8001f66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f8c:	d108      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f8e:	4b30      	ldr	r3, [pc, #192]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	492d      	ldr	r1, [pc, #180]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fa0:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a19      	ldr	r1, [r3, #32]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	4927      	ldr	r1, [pc, #156]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb8:	4b27      	ldr	r3, [pc, #156]	; (8002058 <HAL_RCC_OscConfig+0x4fc>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7fe ff31 	bl	8000e24 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc6:	f7fe ff2d 	bl	8000e24 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e037      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x46a>
 8001fe4:	e02f      	b.n	8002046 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <HAL_RCC_OscConfig+0x4fc>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7fe ff1a 	bl	8000e24 <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff4:	f7fe ff16 	bl	8000e24 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e020      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002006:	4b12      	ldr	r3, [pc, #72]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x498>
 8002012:	e018      	b.n	8002046 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e013      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <HAL_RCC_OscConfig+0x4f4>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	429a      	cmp	r2, r3
 8002032:	d106      	bne.n	8002042 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203e:	429a      	cmp	r2, r3
 8002040:	d001      	beq.n	8002046 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	40007000 	.word	0x40007000
 8002058:	42420060 	.word	0x42420060

0800205c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0d0      	b.n	8002212 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002070:	4b6a      	ldr	r3, [pc, #424]	; (800221c <HAL_RCC_ClockConfig+0x1c0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d910      	bls.n	80020a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207e:	4b67      	ldr	r3, [pc, #412]	; (800221c <HAL_RCC_ClockConfig+0x1c0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 0207 	bic.w	r2, r3, #7
 8002086:	4965      	ldr	r1, [pc, #404]	; (800221c <HAL_RCC_ClockConfig+0x1c0>)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	4313      	orrs	r3, r2
 800208c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800208e:	4b63      	ldr	r3, [pc, #396]	; (800221c <HAL_RCC_ClockConfig+0x1c0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	429a      	cmp	r2, r3
 800209a:	d001      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0b8      	b.n	8002212 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d020      	beq.n	80020ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b8:	4b59      	ldr	r3, [pc, #356]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4a58      	ldr	r2, [pc, #352]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020d0:	4b53      	ldr	r3, [pc, #332]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	4a52      	ldr	r2, [pc, #328]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020dc:	4b50      	ldr	r3, [pc, #320]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	494d      	ldr	r1, [pc, #308]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d040      	beq.n	800217c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d107      	bne.n	8002112 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002102:	4b47      	ldr	r3, [pc, #284]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d115      	bne.n	800213a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e07f      	b.n	8002212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800211a:	4b41      	ldr	r3, [pc, #260]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d109      	bne.n	800213a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e073      	b.n	8002212 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212a:	4b3d      	ldr	r3, [pc, #244]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e06b      	b.n	8002212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800213a:	4b39      	ldr	r3, [pc, #228]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f023 0203 	bic.w	r2, r3, #3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	4936      	ldr	r1, [pc, #216]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	4313      	orrs	r3, r2
 800214a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800214c:	f7fe fe6a 	bl	8000e24 <HAL_GetTick>
 8002150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002152:	e00a      	b.n	800216a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002154:	f7fe fe66 	bl	8000e24 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e053      	b.n	8002212 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	4b2d      	ldr	r3, [pc, #180]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 020c 	and.w	r2, r3, #12
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	429a      	cmp	r2, r3
 800217a:	d1eb      	bne.n	8002154 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800217c:	4b27      	ldr	r3, [pc, #156]	; (800221c <HAL_RCC_ClockConfig+0x1c0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d210      	bcs.n	80021ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218a:	4b24      	ldr	r3, [pc, #144]	; (800221c <HAL_RCC_ClockConfig+0x1c0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 0207 	bic.w	r2, r3, #7
 8002192:	4922      	ldr	r1, [pc, #136]	; (800221c <HAL_RCC_ClockConfig+0x1c0>)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219a:	4b20      	ldr	r3, [pc, #128]	; (800221c <HAL_RCC_ClockConfig+0x1c0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d001      	beq.n	80021ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e032      	b.n	8002212 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b8:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4916      	ldr	r1, [pc, #88]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d009      	beq.n	80021ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021d6:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	490e      	ldr	r1, [pc, #56]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ea:	f000 f821 	bl	8002230 <HAL_RCC_GetSysClockFreq>
 80021ee:	4602      	mov	r2, r0
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	490a      	ldr	r1, [pc, #40]	; (8002224 <HAL_RCC_ClockConfig+0x1c8>)
 80021fc:	5ccb      	ldrb	r3, [r1, r3]
 80021fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002202:	4a09      	ldr	r2, [pc, #36]	; (8002228 <HAL_RCC_ClockConfig+0x1cc>)
 8002204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <HAL_RCC_ClockConfig+0x1d0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe fdc8 	bl	8000da0 <HAL_InitTick>

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40022000 	.word	0x40022000
 8002220:	40021000 	.word	0x40021000
 8002224:	080042b4 	.word	0x080042b4
 8002228:	20000000 	.word	0x20000000
 800222c:	20000004 	.word	0x20000004

08002230 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	2300      	movs	r3, #0
 8002244:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800224a:	4b1e      	ldr	r3, [pc, #120]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b04      	cmp	r3, #4
 8002258:	d002      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x30>
 800225a:	2b08      	cmp	r3, #8
 800225c:	d003      	beq.n	8002266 <HAL_RCC_GetSysClockFreq+0x36>
 800225e:	e027      	b.n	80022b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002260:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002262:	613b      	str	r3, [r7, #16]
      break;
 8002264:	e027      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	0c9b      	lsrs	r3, r3, #18
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	4a17      	ldr	r2, [pc, #92]	; (80022cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002270:	5cd3      	ldrb	r3, [r2, r3]
 8002272:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d010      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800227e:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	0c5b      	lsrs	r3, r3, #17
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800228a:	5cd3      	ldrb	r3, [r2, r3]
 800228c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a0d      	ldr	r2, [pc, #52]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002292:	fb02 f203 	mul.w	r2, r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	fbb2 f3f3 	udiv	r3, r2, r3
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	e004      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a0c      	ldr	r2, [pc, #48]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022a4:	fb02 f303 	mul.w	r3, r2, r3
 80022a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	613b      	str	r3, [r7, #16]
      break;
 80022ae:	e002      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80022b2:	613b      	str	r3, [r7, #16]
      break;
 80022b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022b6:	693b      	ldr	r3, [r7, #16]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40021000 	.word	0x40021000
 80022c8:	007a1200 	.word	0x007a1200
 80022cc:	080042cc 	.word	0x080042cc
 80022d0:	080042dc 	.word	0x080042dc
 80022d4:	003d0900 	.word	0x003d0900

080022d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022dc:	4b02      	ldr	r3, [pc, #8]	; (80022e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80022de:	681b      	ldr	r3, [r3, #0]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	20000000 	.word	0x20000000

080022ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022f0:	f7ff fff2 	bl	80022d8 <HAL_RCC_GetHCLKFreq>
 80022f4:	4602      	mov	r2, r0
 80022f6:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_RCC_GetPCLK1Freq+0x20>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	4903      	ldr	r1, [pc, #12]	; (8002310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002302:	5ccb      	ldrb	r3, [r1, r3]
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002308:	4618      	mov	r0, r3
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40021000 	.word	0x40021000
 8002310:	080042c4 	.word	0x080042c4

08002314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002318:	f7ff ffde 	bl	80022d8 <HAL_RCC_GetHCLKFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	0adb      	lsrs	r3, r3, #11
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	4903      	ldr	r1, [pc, #12]	; (8002338 <HAL_RCC_GetPCLK2Freq+0x24>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002330:	4618      	mov	r0, r3
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40021000 	.word	0x40021000
 8002338:	080042c4 	.word	0x080042c4

0800233c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002344:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <RCC_Delay+0x34>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <RCC_Delay+0x38>)
 800234a:	fba2 2303 	umull	r2, r3, r2, r3
 800234e:	0a5b      	lsrs	r3, r3, #9
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	fb02 f303 	mul.w	r3, r2, r3
 8002356:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002358:	bf00      	nop
  }
  while (Delay --);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1e5a      	subs	r2, r3, #1
 800235e:	60fa      	str	r2, [r7, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1f9      	bne.n	8002358 <RCC_Delay+0x1c>
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	20000000 	.word	0x20000000
 8002374:	10624dd3 	.word	0x10624dd3

08002378 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d07d      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002394:	2300      	movs	r3, #0
 8002396:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002398:	4b4f      	ldr	r3, [pc, #316]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10d      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a4:	4b4c      	ldr	r3, [pc, #304]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	4a4b      	ldr	r2, [pc, #300]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ae:	61d3      	str	r3, [r2, #28]
 80023b0:	4b49      	ldr	r3, [pc, #292]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023bc:	2301      	movs	r3, #1
 80023be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c0:	4b46      	ldr	r3, [pc, #280]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d118      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023cc:	4b43      	ldr	r3, [pc, #268]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a42      	ldr	r2, [pc, #264]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d8:	f7fe fd24 	bl	8000e24 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023de:	e008      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e0:	f7fe fd20 	bl	8000e24 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b64      	cmp	r3, #100	; 0x64
 80023ec:	d901      	bls.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e06d      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f2:	4b3a      	ldr	r3, [pc, #232]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023fe:	4b36      	ldr	r3, [pc, #216]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002406:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d02e      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	429a      	cmp	r2, r3
 800241a:	d027      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800241c:	4b2e      	ldr	r3, [pc, #184]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002424:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002426:	4b2e      	ldr	r3, [pc, #184]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002428:	2201      	movs	r2, #1
 800242a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800242c:	4b2c      	ldr	r3, [pc, #176]	; (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002432:	4a29      	ldr	r2, [pc, #164]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d014      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002442:	f7fe fcef 	bl	8000e24 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002448:	e00a      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244a:	f7fe fceb 	bl	8000e24 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f241 3288 	movw	r2, #5000	; 0x1388
 8002458:	4293      	cmp	r3, r2
 800245a:	d901      	bls.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e036      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002460:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d0ee      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800246c:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4917      	ldr	r1, [pc, #92]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800247a:	4313      	orrs	r3, r2
 800247c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800247e:	7dfb      	ldrb	r3, [r7, #23]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d105      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002484:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	4a13      	ldr	r2, [pc, #76]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800248a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800248e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800249c:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	490b      	ldr	r1, [pc, #44]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024ba:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	4904      	ldr	r1, [pc, #16]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	40007000 	.word	0x40007000
 80024e0:	42420440 	.word	0x42420440

080024e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e041      	b.n	800257a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe fb1e 	bl	8000b4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3304      	adds	r3, #4
 8002520:	4619      	mov	r1, r3
 8002522:	4610      	mov	r0, r2
 8002524:	f000 fa56 	bl	80029d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b01      	cmp	r3, #1
 8002596:	d001      	beq.n	800259c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e035      	b.n	8002608 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a16      	ldr	r2, [pc, #88]	; (8002614 <HAL_TIM_Base_Start_IT+0x90>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d009      	beq.n	80025d2 <HAL_TIM_Base_Start_IT+0x4e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c6:	d004      	beq.n	80025d2 <HAL_TIM_Base_Start_IT+0x4e>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a12      	ldr	r2, [pc, #72]	; (8002618 <HAL_TIM_Base_Start_IT+0x94>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d111      	bne.n	80025f6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2b06      	cmp	r3, #6
 80025e2:	d010      	beq.n	8002606 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f4:	e007      	b.n	8002606 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f042 0201 	orr.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	40012c00 	.word	0x40012c00
 8002618:	40000400 	.word	0x40000400

0800261c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d020      	beq.n	8002680 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d01b      	beq.n	8002680 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0202 	mvn.w	r2, #2
 8002650:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f998 	bl	800299c <HAL_TIM_IC_CaptureCallback>
 800266c:	e005      	b.n	800267a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f98b 	bl	800298a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f99a 	bl	80029ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	2b00      	cmp	r3, #0
 8002688:	d020      	beq.n	80026cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d01b      	beq.n	80026cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0204 	mvn.w	r2, #4
 800269c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2202      	movs	r2, #2
 80026a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f972 	bl	800299c <HAL_TIM_IC_CaptureCallback>
 80026b8:	e005      	b.n	80026c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f965 	bl	800298a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f974 	bl	80029ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d020      	beq.n	8002718 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f003 0308 	and.w	r3, r3, #8
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d01b      	beq.n	8002718 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f06f 0208 	mvn.w	r2, #8
 80026e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2204      	movs	r2, #4
 80026ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f94c 	bl	800299c <HAL_TIM_IC_CaptureCallback>
 8002704:	e005      	b.n	8002712 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f93f 	bl	800298a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f94e 	bl	80029ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	2b00      	cmp	r3, #0
 8002720:	d020      	beq.n	8002764 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f003 0310 	and.w	r3, r3, #16
 8002728:	2b00      	cmp	r3, #0
 800272a:	d01b      	beq.n	8002764 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0210 	mvn.w	r2, #16
 8002734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2208      	movs	r2, #8
 800273a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f926 	bl	800299c <HAL_TIM_IC_CaptureCallback>
 8002750:	e005      	b.n	800275e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f919 	bl	800298a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f928 	bl	80029ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00c      	beq.n	8002788 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d007      	beq.n	8002788 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0201 	mvn.w	r2, #1
 8002780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7fe f914 	bl	80009b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00c      	beq.n	80027ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002798:	2b00      	cmp	r3, #0
 800279a:	d007      	beq.n	80027ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fa6f 	bl	8002c8a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00c      	beq.n	80027d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d007      	beq.n	80027d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f8f8 	bl	80029c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f003 0320 	and.w	r3, r3, #32
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00c      	beq.n	80027f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f003 0320 	and.w	r3, r3, #32
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d007      	beq.n	80027f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0220 	mvn.w	r2, #32
 80027ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 fa42 	bl	8002c78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027f4:	bf00      	nop
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_TIM_ConfigClockSource+0x1c>
 8002814:	2302      	movs	r3, #2
 8002816:	e0b4      	b.n	8002982 <HAL_TIM_ConfigClockSource+0x186>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800283e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002850:	d03e      	beq.n	80028d0 <HAL_TIM_ConfigClockSource+0xd4>
 8002852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002856:	f200 8087 	bhi.w	8002968 <HAL_TIM_ConfigClockSource+0x16c>
 800285a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800285e:	f000 8086 	beq.w	800296e <HAL_TIM_ConfigClockSource+0x172>
 8002862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002866:	d87f      	bhi.n	8002968 <HAL_TIM_ConfigClockSource+0x16c>
 8002868:	2b70      	cmp	r3, #112	; 0x70
 800286a:	d01a      	beq.n	80028a2 <HAL_TIM_ConfigClockSource+0xa6>
 800286c:	2b70      	cmp	r3, #112	; 0x70
 800286e:	d87b      	bhi.n	8002968 <HAL_TIM_ConfigClockSource+0x16c>
 8002870:	2b60      	cmp	r3, #96	; 0x60
 8002872:	d050      	beq.n	8002916 <HAL_TIM_ConfigClockSource+0x11a>
 8002874:	2b60      	cmp	r3, #96	; 0x60
 8002876:	d877      	bhi.n	8002968 <HAL_TIM_ConfigClockSource+0x16c>
 8002878:	2b50      	cmp	r3, #80	; 0x50
 800287a:	d03c      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0xfa>
 800287c:	2b50      	cmp	r3, #80	; 0x50
 800287e:	d873      	bhi.n	8002968 <HAL_TIM_ConfigClockSource+0x16c>
 8002880:	2b40      	cmp	r3, #64	; 0x40
 8002882:	d058      	beq.n	8002936 <HAL_TIM_ConfigClockSource+0x13a>
 8002884:	2b40      	cmp	r3, #64	; 0x40
 8002886:	d86f      	bhi.n	8002968 <HAL_TIM_ConfigClockSource+0x16c>
 8002888:	2b30      	cmp	r3, #48	; 0x30
 800288a:	d064      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x15a>
 800288c:	2b30      	cmp	r3, #48	; 0x30
 800288e:	d86b      	bhi.n	8002968 <HAL_TIM_ConfigClockSource+0x16c>
 8002890:	2b20      	cmp	r3, #32
 8002892:	d060      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x15a>
 8002894:	2b20      	cmp	r3, #32
 8002896:	d867      	bhi.n	8002968 <HAL_TIM_ConfigClockSource+0x16c>
 8002898:	2b00      	cmp	r3, #0
 800289a:	d05c      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x15a>
 800289c:	2b10      	cmp	r3, #16
 800289e:	d05a      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x15a>
 80028a0:	e062      	b.n	8002968 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6899      	ldr	r1, [r3, #8]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f000 f96a 	bl	8002b8a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	609a      	str	r2, [r3, #8]
      break;
 80028ce:	e04f      	b.n	8002970 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6818      	ldr	r0, [r3, #0]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	6899      	ldr	r1, [r3, #8]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f000 f953 	bl	8002b8a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028f2:	609a      	str	r2, [r3, #8]
      break;
 80028f4:	e03c      	b.n	8002970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6818      	ldr	r0, [r3, #0]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	6859      	ldr	r1, [r3, #4]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	461a      	mov	r2, r3
 8002904:	f000 f8ca 	bl	8002a9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2150      	movs	r1, #80	; 0x50
 800290e:	4618      	mov	r0, r3
 8002910:	f000 f921 	bl	8002b56 <TIM_ITRx_SetConfig>
      break;
 8002914:	e02c      	b.n	8002970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	6859      	ldr	r1, [r3, #4]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	461a      	mov	r2, r3
 8002924:	f000 f8e8 	bl	8002af8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	2160      	movs	r1, #96	; 0x60
 800292e:	4618      	mov	r0, r3
 8002930:	f000 f911 	bl	8002b56 <TIM_ITRx_SetConfig>
      break;
 8002934:	e01c      	b.n	8002970 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6859      	ldr	r1, [r3, #4]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	461a      	mov	r2, r3
 8002944:	f000 f8aa 	bl	8002a9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2140      	movs	r1, #64	; 0x40
 800294e:	4618      	mov	r0, r3
 8002950:	f000 f901 	bl	8002b56 <TIM_ITRx_SetConfig>
      break;
 8002954:	e00c      	b.n	8002970 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4619      	mov	r1, r3
 8002960:	4610      	mov	r0, r2
 8002962:	f000 f8f8 	bl	8002b56 <TIM_ITRx_SetConfig>
      break;
 8002966:	e003      	b.n	8002970 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	73fb      	strb	r3, [r7, #15]
      break;
 800296c:	e000      	b.n	8002970 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800296e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002980:	7bfb      	ldrb	r3, [r7, #15]
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc80      	pop	{r7}
 80029d0:	4770      	bx	lr
	...

080029d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a2b      	ldr	r2, [pc, #172]	; (8002a94 <TIM_Base_SetConfig+0xc0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d007      	beq.n	80029fc <TIM_Base_SetConfig+0x28>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f2:	d003      	beq.n	80029fc <TIM_Base_SetConfig+0x28>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a28      	ldr	r2, [pc, #160]	; (8002a98 <TIM_Base_SetConfig+0xc4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d108      	bne.n	8002a0e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a20      	ldr	r2, [pc, #128]	; (8002a94 <TIM_Base_SetConfig+0xc0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d007      	beq.n	8002a26 <TIM_Base_SetConfig+0x52>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1c:	d003      	beq.n	8002a26 <TIM_Base_SetConfig+0x52>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a1d      	ldr	r2, [pc, #116]	; (8002a98 <TIM_Base_SetConfig+0xc4>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d108      	bne.n	8002a38 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a0d      	ldr	r2, [pc, #52]	; (8002a94 <TIM_Base_SetConfig+0xc0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d103      	bne.n	8002a6c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d005      	beq.n	8002a8a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	f023 0201 	bic.w	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	611a      	str	r2, [r3, #16]
  }
}
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	40012c00 	.word	0x40012c00
 8002a98:	40000400 	.word	0x40000400

08002a9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	f023 0201 	bic.w	r2, r3, #1
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f023 030a 	bic.w	r3, r3, #10
 8002ad8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	621a      	str	r2, [r3, #32]
}
 8002aee:	bf00      	nop
 8002af0:	371c      	adds	r7, #28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	f023 0210 	bic.w	r2, r3, #16
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	031b      	lsls	r3, r3, #12
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b34:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	621a      	str	r2, [r3, #32]
}
 8002b4c:	bf00      	nop
 8002b4e:	371c      	adds	r7, #28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b085      	sub	sp, #20
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f043 0307 	orr.w	r3, r3, #7
 8002b78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	609a      	str	r2, [r3, #8]
}
 8002b80:	bf00      	nop
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr

08002b8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b087      	sub	sp, #28
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
 8002b96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ba4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	021a      	lsls	r2, r3, #8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	431a      	orrs	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	609a      	str	r2, [r3, #8]
}
 8002bbe:	bf00      	nop
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e041      	b.n	8002c64 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a14      	ldr	r2, [pc, #80]	; (8002c70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d009      	beq.n	8002c38 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c2c:	d004      	beq.n	8002c38 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a10      	ldr	r2, [pc, #64]	; (8002c74 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d10c      	bne.n	8002c52 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	40012c00 	.word	0x40012c00
 8002c74:	40000400 	.word	0x40000400

08002c78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr

08002c8a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr

08002c9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e042      	b.n	8002d34 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fd ff66 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2224      	movs	r2, #36	; 0x24
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 fdb7 	bl	8003854 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08a      	sub	sp, #40	; 0x28
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	603b      	str	r3, [r7, #0]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	d175      	bne.n	8002e48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <HAL_UART_Transmit+0x2c>
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e06e      	b.n	8002e4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2221      	movs	r2, #33	; 0x21
 8002d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d7a:	f7fe f853 	bl	8000e24 <HAL_GetTick>
 8002d7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	88fa      	ldrh	r2, [r7, #6]
 8002d84:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	88fa      	ldrh	r2, [r7, #6]
 8002d8a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d94:	d108      	bne.n	8002da8 <HAL_UART_Transmit+0x6c>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d104      	bne.n	8002da8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	61bb      	str	r3, [r7, #24]
 8002da6:	e003      	b.n	8002db0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002db0:	e02e      	b.n	8002e10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2200      	movs	r2, #0
 8002dba:	2180      	movs	r1, #128	; 0x80
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 fb1c 	bl	80033fa <UART_WaitOnFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d005      	beq.n	8002dd4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e03a      	b.n	8002e4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10b      	bne.n	8002df2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002de8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	3302      	adds	r3, #2
 8002dee:	61bb      	str	r3, [r7, #24]
 8002df0:	e007      	b.n	8002e02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	781a      	ldrb	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1cb      	bne.n	8002db2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2200      	movs	r2, #0
 8002e22:	2140      	movs	r1, #64	; 0x40
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 fae8 	bl	80033fa <UART_WaitOnFlagUntilTimeout>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e006      	b.n	8002e4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2220      	movs	r2, #32
 8002e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	e000      	b.n	8002e4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002e48:	2302      	movs	r3, #2
  }
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3720      	adds	r7, #32
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	d112      	bne.n	8002e92 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <HAL_UART_Receive_IT+0x26>
 8002e72:	88fb      	ldrh	r3, [r7, #6]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e00b      	b.n	8002e94 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e82:	88fb      	ldrh	r3, [r7, #6]
 8002e84:	461a      	mov	r2, r3
 8002e86:	68b9      	ldr	r1, [r7, #8]
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 fb0f 	bl	80034ac <UART_Start_Receive_IT>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	e000      	b.n	8002e94 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002e92:	2302      	movs	r3, #2
  }
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b0ba      	sub	sp, #232	; 0xe8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002eda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10f      	bne.n	8002f02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee6:	f003 0320 	and.w	r3, r3, #32
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <HAL_UART_IRQHandler+0x66>
 8002eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 fbec 	bl	80036d8 <UART_Receive_IT>
      return;
 8002f00:	e25b      	b.n	80033ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002f02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 80de 	beq.w	80030c8 <HAL_UART_IRQHandler+0x22c>
 8002f0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d106      	bne.n	8002f26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f1c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80d1 	beq.w	80030c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00b      	beq.n	8002f4a <HAL_UART_IRQHandler+0xae>
 8002f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d005      	beq.n	8002f4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	f043 0201 	orr.w	r2, r3, #1
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00b      	beq.n	8002f6e <HAL_UART_IRQHandler+0xd2>
 8002f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d005      	beq.n	8002f6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	f043 0202 	orr.w	r2, r3, #2
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00b      	beq.n	8002f92 <HAL_UART_IRQHandler+0xf6>
 8002f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	f043 0204 	orr.w	r2, r3, #4
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d011      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x126>
 8002f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d105      	bne.n	8002fb6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002faa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d005      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	f043 0208 	orr.w	r2, r3, #8
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 81f2 	beq.w	80033b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fd0:	f003 0320 	and.w	r3, r3, #32
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d008      	beq.n	8002fea <HAL_UART_IRQHandler+0x14e>
 8002fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fdc:	f003 0320 	and.w	r3, r3, #32
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fb77 	bl	80036d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf14      	ite	ne
 8002ff8:	2301      	movne	r3, #1
 8002ffa:	2300      	moveq	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d103      	bne.n	8003016 <HAL_UART_IRQHandler+0x17a>
 800300e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003012:	2b00      	cmp	r3, #0
 8003014:	d04f      	beq.n	80030b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fa81 	bl	800351e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	d041      	beq.n	80030ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3314      	adds	r3, #20
 8003030:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003034:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003038:	e853 3f00 	ldrex	r3, [r3]
 800303c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003040:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003048:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3314      	adds	r3, #20
 8003052:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003056:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800305a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003062:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003066:	e841 2300 	strex	r3, r2, [r1]
 800306a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800306e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1d9      	bne.n	800302a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307a:	2b00      	cmp	r3, #0
 800307c:	d013      	beq.n	80030a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003082:	4a7e      	ldr	r2, [pc, #504]	; (800327c <HAL_UART_IRQHandler+0x3e0>)
 8003084:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe fb42 	bl	8001714 <HAL_DMA_Abort_IT>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d016      	beq.n	80030c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030a0:	4610      	mov	r0, r2
 80030a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a4:	e00e      	b.n	80030c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f993 	bl	80033d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ac:	e00a      	b.n	80030c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f98f 	bl	80033d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b4:	e006      	b.n	80030c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f98b 	bl	80033d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80030c2:	e175      	b.n	80033b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c4:	bf00      	nop
    return;
 80030c6:	e173      	b.n	80033b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	f040 814f 	bne.w	8003370 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80030d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 8148 	beq.w	8003370 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80030e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 8141 	beq.w	8003370 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030ee:	2300      	movs	r3, #0
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 80b6 	beq.w	8003280 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003120:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 8145 	beq.w	80033b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800312e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003132:	429a      	cmp	r2, r3
 8003134:	f080 813e 	bcs.w	80033b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800313e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	2b20      	cmp	r3, #32
 8003148:	f000 8088 	beq.w	800325c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	330c      	adds	r3, #12
 8003152:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003156:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800315a:	e853 3f00 	ldrex	r3, [r3]
 800315e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003162:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003166:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800316a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	330c      	adds	r3, #12
 8003174:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003178:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800317c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003180:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003184:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003188:	e841 2300 	strex	r3, r2, [r1]
 800318c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003190:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003194:	2b00      	cmp	r3, #0
 8003196:	d1d9      	bne.n	800314c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3314      	adds	r3, #20
 800319e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031a2:	e853 3f00 	ldrex	r3, [r3]
 80031a6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80031a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031aa:	f023 0301 	bic.w	r3, r3, #1
 80031ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	3314      	adds	r3, #20
 80031b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031bc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80031c0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80031c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80031c8:	e841 2300 	strex	r3, r2, [r1]
 80031cc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80031ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1e1      	bne.n	8003198 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3314      	adds	r3, #20
 80031da:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031de:	e853 3f00 	ldrex	r3, [r3]
 80031e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80031e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3314      	adds	r3, #20
 80031f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80031f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80031fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80031fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003200:	e841 2300 	strex	r3, r2, [r1]
 8003204:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003206:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1e3      	bne.n	80031d4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	330c      	adds	r3, #12
 8003220:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003224:	e853 3f00 	ldrex	r3, [r3]
 8003228:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800322a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800322c:	f023 0310 	bic.w	r3, r3, #16
 8003230:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	330c      	adds	r3, #12
 800323a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800323e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003240:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003242:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003244:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003246:	e841 2300 	strex	r3, r2, [r1]
 800324a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800324c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1e3      	bne.n	800321a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe fa21 	bl	800169e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800326a:	b29b      	uxth	r3, r3
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	b29b      	uxth	r3, r3
 8003270:	4619      	mov	r1, r3
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f8b6 	bl	80033e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003278:	e09c      	b.n	80033b4 <HAL_UART_IRQHandler+0x518>
 800327a:	bf00      	nop
 800327c:	080035e3 	.word	0x080035e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003288:	b29b      	uxth	r3, r3
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 808e 	beq.w	80033b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800329c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 8089 	beq.w	80033b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	330c      	adds	r3, #12
 80032ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b0:	e853 3f00 	ldrex	r3, [r3]
 80032b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80032b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	330c      	adds	r3, #12
 80032c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80032ca:	647a      	str	r2, [r7, #68]	; 0x44
 80032cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032d2:	e841 2300 	strex	r3, r2, [r1]
 80032d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1e3      	bne.n	80032a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3314      	adds	r3, #20
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	e853 3f00 	ldrex	r3, [r3]
 80032ec:	623b      	str	r3, [r7, #32]
   return(result);
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	f023 0301 	bic.w	r3, r3, #1
 80032f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3314      	adds	r3, #20
 80032fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003302:	633a      	str	r2, [r7, #48]	; 0x30
 8003304:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003306:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800330a:	e841 2300 	strex	r3, r2, [r1]
 800330e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1e3      	bne.n	80032de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	330c      	adds	r3, #12
 800332a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	e853 3f00 	ldrex	r3, [r3]
 8003332:	60fb      	str	r3, [r7, #12]
   return(result);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f023 0310 	bic.w	r3, r3, #16
 800333a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	330c      	adds	r3, #12
 8003344:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003348:	61fa      	str	r2, [r7, #28]
 800334a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334c:	69b9      	ldr	r1, [r7, #24]
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	e841 2300 	strex	r3, r2, [r1]
 8003354:	617b      	str	r3, [r7, #20]
   return(result);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e3      	bne.n	8003324 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2202      	movs	r2, #2
 8003360:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003362:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003366:	4619      	mov	r1, r3
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f83b 	bl	80033e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800336e:	e023      	b.n	80033b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003378:	2b00      	cmp	r3, #0
 800337a:	d009      	beq.n	8003390 <HAL_UART_IRQHandler+0x4f4>
 800337c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f93e 	bl	800360a <UART_Transmit_IT>
    return;
 800338e:	e014      	b.n	80033ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00e      	beq.n	80033ba <HAL_UART_IRQHandler+0x51e>
 800339c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f97d 	bl	80036a8 <UART_EndTransmit_IT>
    return;
 80033ae:	e004      	b.n	80033ba <HAL_UART_IRQHandler+0x51e>
    return;
 80033b0:	bf00      	nop
 80033b2:	e002      	b.n	80033ba <HAL_UART_IRQHandler+0x51e>
      return;
 80033b4:	bf00      	nop
 80033b6:	e000      	b.n	80033ba <HAL_UART_IRQHandler+0x51e>
      return;
 80033b8:	bf00      	nop
  }
}
 80033ba:	37e8      	adds	r7, #232	; 0xe8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr

080033d2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr

080033e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	460b      	mov	r3, r1
 80033ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bc80      	pop	{r7}
 80033f8:	4770      	bx	lr

080033fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b086      	sub	sp, #24
 80033fe:	af00      	add	r7, sp, #0
 8003400:	60f8      	str	r0, [r7, #12]
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	603b      	str	r3, [r7, #0]
 8003406:	4613      	mov	r3, r2
 8003408:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800340a:	e03b      	b.n	8003484 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003412:	d037      	beq.n	8003484 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003414:	f7fd fd06 	bl	8000e24 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	6a3a      	ldr	r2, [r7, #32]
 8003420:	429a      	cmp	r2, r3
 8003422:	d302      	bcc.n	800342a <UART_WaitOnFlagUntilTimeout+0x30>
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e03a      	b.n	80034a4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d023      	beq.n	8003484 <UART_WaitOnFlagUntilTimeout+0x8a>
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b80      	cmp	r3, #128	; 0x80
 8003440:	d020      	beq.n	8003484 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2b40      	cmp	r3, #64	; 0x40
 8003446:	d01d      	beq.n	8003484 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b08      	cmp	r3, #8
 8003454:	d116      	bne.n	8003484 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	617b      	str	r3, [r7, #20]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f856 	bl	800351e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2208      	movs	r2, #8
 8003476:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e00f      	b.n	80034a4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	4013      	ands	r3, r2
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	429a      	cmp	r2, r3
 8003492:	bf0c      	ite	eq
 8003494:	2301      	moveq	r3, #1
 8003496:	2300      	movne	r3, #0
 8003498:	b2db      	uxtb	r3, r3
 800349a:	461a      	mov	r2, r3
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d0b4      	beq.n	800340c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	4613      	mov	r3, r2
 80034b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	88fa      	ldrh	r2, [r7, #6]
 80034c4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	88fa      	ldrh	r2, [r7, #6]
 80034ca:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2222      	movs	r2, #34	; 0x22
 80034d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0201 	orr.w	r2, r2, #1
 8003500:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f042 0220 	orr.w	r2, r2, #32
 8003510:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	bc80      	pop	{r7}
 800351c:	4770      	bx	lr

0800351e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800351e:	b480      	push	{r7}
 8003520:	b095      	sub	sp, #84	; 0x54
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	330c      	adds	r3, #12
 800352c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003530:	e853 3f00 	ldrex	r3, [r3]
 8003534:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003538:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800353c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	330c      	adds	r3, #12
 8003544:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003546:	643a      	str	r2, [r7, #64]	; 0x40
 8003548:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800354c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800354e:	e841 2300 	strex	r3, r2, [r1]
 8003552:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1e5      	bne.n	8003526 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3314      	adds	r3, #20
 8003560:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	e853 3f00 	ldrex	r3, [r3]
 8003568:	61fb      	str	r3, [r7, #28]
   return(result);
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	f023 0301 	bic.w	r3, r3, #1
 8003570:	64bb      	str	r3, [r7, #72]	; 0x48
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	3314      	adds	r3, #20
 8003578:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800357a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800357c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003582:	e841 2300 	strex	r3, r2, [r1]
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1e5      	bne.n	800355a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	2b01      	cmp	r3, #1
 8003594:	d119      	bne.n	80035ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	330c      	adds	r3, #12
 800359c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	e853 3f00 	ldrex	r3, [r3]
 80035a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f023 0310 	bic.w	r3, r3, #16
 80035ac:	647b      	str	r3, [r7, #68]	; 0x44
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	330c      	adds	r3, #12
 80035b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035b6:	61ba      	str	r2, [r7, #24]
 80035b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ba:	6979      	ldr	r1, [r7, #20]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	e841 2300 	strex	r3, r2, [r1]
 80035c2:	613b      	str	r3, [r7, #16]
   return(result);
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1e5      	bne.n	8003596 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80035d8:	bf00      	nop
 80035da:	3754      	adds	r7, #84	; 0x54
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc80      	pop	{r7}
 80035e0:	4770      	bx	lr

080035e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f7ff fee8 	bl	80033d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003602:	bf00      	nop
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800360a:	b480      	push	{r7}
 800360c:	b085      	sub	sp, #20
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b21      	cmp	r3, #33	; 0x21
 800361c:	d13e      	bne.n	800369c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003626:	d114      	bne.n	8003652 <UART_Transmit_IT+0x48>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d110      	bne.n	8003652 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a1b      	ldr	r3, [r3, #32]
 8003634:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	461a      	mov	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003644:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	1c9a      	adds	r2, r3, #2
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	621a      	str	r2, [r3, #32]
 8003650:	e008      	b.n	8003664 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	1c59      	adds	r1, r3, #1
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6211      	str	r1, [r2, #32]
 800365c:	781a      	ldrb	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003668:	b29b      	uxth	r3, r3
 800366a:	3b01      	subs	r3, #1
 800366c:	b29b      	uxth	r3, r3
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	4619      	mov	r1, r3
 8003672:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10f      	bne.n	8003698 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003686:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68da      	ldr	r2, [r3, #12]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003696:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003698:	2300      	movs	r3, #0
 800369a:	e000      	b.n	800369e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800369c:	2302      	movs	r3, #2
  }
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr

080036a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7ff fe79 	bl	80033c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08c      	sub	sp, #48	; 0x30
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b22      	cmp	r3, #34	; 0x22
 80036ea:	f040 80ae 	bne.w	800384a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f6:	d117      	bne.n	8003728 <UART_Receive_IT+0x50>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d113      	bne.n	8003728 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003700:	2300      	movs	r3, #0
 8003702:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003708:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	b29b      	uxth	r3, r3
 8003712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003716:	b29a      	uxth	r2, r3
 8003718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003720:	1c9a      	adds	r2, r3, #2
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	629a      	str	r2, [r3, #40]	; 0x28
 8003726:	e026      	b.n	8003776 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800372e:	2300      	movs	r3, #0
 8003730:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800373a:	d007      	beq.n	800374c <UART_Receive_IT+0x74>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10a      	bne.n	800375a <UART_Receive_IT+0x82>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d106      	bne.n	800375a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	b2da      	uxtb	r2, r3
 8003754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003756:	701a      	strb	r2, [r3, #0]
 8003758:	e008      	b.n	800376c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003766:	b2da      	uxtb	r2, r3
 8003768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800377a:	b29b      	uxth	r3, r3
 800377c:	3b01      	subs	r3, #1
 800377e:	b29b      	uxth	r3, r3
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	4619      	mov	r1, r3
 8003784:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003786:	2b00      	cmp	r3, #0
 8003788:	d15d      	bne.n	8003846 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0220 	bic.w	r2, r2, #32
 8003798:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695a      	ldr	r2, [r3, #20]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0201 	bic.w	r2, r2, #1
 80037b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d135      	bne.n	800383c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	330c      	adds	r3, #12
 80037dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	e853 3f00 	ldrex	r3, [r3]
 80037e4:	613b      	str	r3, [r7, #16]
   return(result);
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f023 0310 	bic.w	r3, r3, #16
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	330c      	adds	r3, #12
 80037f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f6:	623a      	str	r2, [r7, #32]
 80037f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fa:	69f9      	ldr	r1, [r7, #28]
 80037fc:	6a3a      	ldr	r2, [r7, #32]
 80037fe:	e841 2300 	strex	r3, r2, [r1]
 8003802:	61bb      	str	r3, [r7, #24]
   return(result);
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1e5      	bne.n	80037d6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0310 	and.w	r3, r3, #16
 8003814:	2b10      	cmp	r3, #16
 8003816:	d10a      	bne.n	800382e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003818:	2300      	movs	r3, #0
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003832:	4619      	mov	r1, r3
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff fdd5 	bl	80033e4 <HAL_UARTEx_RxEventCallback>
 800383a:	e002      	b.n	8003842 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7fc fef1 	bl	8000624 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003842:	2300      	movs	r3, #0
 8003844:	e002      	b.n	800384c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	e000      	b.n	800384c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800384a:	2302      	movs	r3, #2
  }
}
 800384c:	4618      	mov	r0, r3
 800384e:	3730      	adds	r7, #48	; 0x30
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	4313      	orrs	r3, r2
 8003882:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800388e:	f023 030c 	bic.w	r3, r3, #12
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	68b9      	ldr	r1, [r7, #8]
 8003898:	430b      	orrs	r3, r1
 800389a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699a      	ldr	r2, [r3, #24]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a2c      	ldr	r2, [pc, #176]	; (8003968 <UART_SetConfig+0x114>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d103      	bne.n	80038c4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80038bc:	f7fe fd2a 	bl	8002314 <HAL_RCC_GetPCLK2Freq>
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	e002      	b.n	80038ca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80038c4:	f7fe fd12 	bl	80022ec <HAL_RCC_GetPCLK1Freq>
 80038c8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	009a      	lsls	r2, r3, #2
 80038d4:	441a      	add	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038e0:	4a22      	ldr	r2, [pc, #136]	; (800396c <UART_SetConfig+0x118>)
 80038e2:	fba2 2303 	umull	r2, r3, r2, r3
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	0119      	lsls	r1, r3, #4
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	009a      	lsls	r2, r3, #2
 80038f4:	441a      	add	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003900:	4b1a      	ldr	r3, [pc, #104]	; (800396c <UART_SetConfig+0x118>)
 8003902:	fba3 0302 	umull	r0, r3, r3, r2
 8003906:	095b      	lsrs	r3, r3, #5
 8003908:	2064      	movs	r0, #100	; 0x64
 800390a:	fb00 f303 	mul.w	r3, r0, r3
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	3332      	adds	r3, #50	; 0x32
 8003914:	4a15      	ldr	r2, [pc, #84]	; (800396c <UART_SetConfig+0x118>)
 8003916:	fba2 2303 	umull	r2, r3, r2, r3
 800391a:	095b      	lsrs	r3, r3, #5
 800391c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003920:	4419      	add	r1, r3
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	4613      	mov	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4413      	add	r3, r2
 800392a:	009a      	lsls	r2, r3, #2
 800392c:	441a      	add	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	fbb2 f2f3 	udiv	r2, r2, r3
 8003938:	4b0c      	ldr	r3, [pc, #48]	; (800396c <UART_SetConfig+0x118>)
 800393a:	fba3 0302 	umull	r0, r3, r3, r2
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	2064      	movs	r0, #100	; 0x64
 8003942:	fb00 f303 	mul.w	r3, r0, r3
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	3332      	adds	r3, #50	; 0x32
 800394c:	4a07      	ldr	r2, [pc, #28]	; (800396c <UART_SetConfig+0x118>)
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	095b      	lsrs	r3, r3, #5
 8003954:	f003 020f 	and.w	r2, r3, #15
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	440a      	add	r2, r1
 800395e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003960:	bf00      	nop
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40013800 	.word	0x40013800
 800396c:	51eb851f 	.word	0x51eb851f

08003970 <__errno>:
 8003970:	4b01      	ldr	r3, [pc, #4]	; (8003978 <__errno+0x8>)
 8003972:	6818      	ldr	r0, [r3, #0]
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	2000000c 	.word	0x2000000c

0800397c <__libc_init_array>:
 800397c:	b570      	push	{r4, r5, r6, lr}
 800397e:	2600      	movs	r6, #0
 8003980:	4d0c      	ldr	r5, [pc, #48]	; (80039b4 <__libc_init_array+0x38>)
 8003982:	4c0d      	ldr	r4, [pc, #52]	; (80039b8 <__libc_init_array+0x3c>)
 8003984:	1b64      	subs	r4, r4, r5
 8003986:	10a4      	asrs	r4, r4, #2
 8003988:	42a6      	cmp	r6, r4
 800398a:	d109      	bne.n	80039a0 <__libc_init_array+0x24>
 800398c:	f000 fc5c 	bl	8004248 <_init>
 8003990:	2600      	movs	r6, #0
 8003992:	4d0a      	ldr	r5, [pc, #40]	; (80039bc <__libc_init_array+0x40>)
 8003994:	4c0a      	ldr	r4, [pc, #40]	; (80039c0 <__libc_init_array+0x44>)
 8003996:	1b64      	subs	r4, r4, r5
 8003998:	10a4      	asrs	r4, r4, #2
 800399a:	42a6      	cmp	r6, r4
 800399c:	d105      	bne.n	80039aa <__libc_init_array+0x2e>
 800399e:	bd70      	pop	{r4, r5, r6, pc}
 80039a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039a4:	4798      	blx	r3
 80039a6:	3601      	adds	r6, #1
 80039a8:	e7ee      	b.n	8003988 <__libc_init_array+0xc>
 80039aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ae:	4798      	blx	r3
 80039b0:	3601      	adds	r6, #1
 80039b2:	e7f2      	b.n	800399a <__libc_init_array+0x1e>
 80039b4:	08004314 	.word	0x08004314
 80039b8:	08004314 	.word	0x08004314
 80039bc:	08004314 	.word	0x08004314
 80039c0:	08004318 	.word	0x08004318

080039c4 <memset>:
 80039c4:	4603      	mov	r3, r0
 80039c6:	4402      	add	r2, r0
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d100      	bne.n	80039ce <memset+0xa>
 80039cc:	4770      	bx	lr
 80039ce:	f803 1b01 	strb.w	r1, [r3], #1
 80039d2:	e7f9      	b.n	80039c8 <memset+0x4>

080039d4 <siprintf>:
 80039d4:	b40e      	push	{r1, r2, r3}
 80039d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80039da:	b500      	push	{lr}
 80039dc:	b09c      	sub	sp, #112	; 0x70
 80039de:	ab1d      	add	r3, sp, #116	; 0x74
 80039e0:	9002      	str	r0, [sp, #8]
 80039e2:	9006      	str	r0, [sp, #24]
 80039e4:	9107      	str	r1, [sp, #28]
 80039e6:	9104      	str	r1, [sp, #16]
 80039e8:	4808      	ldr	r0, [pc, #32]	; (8003a0c <siprintf+0x38>)
 80039ea:	4909      	ldr	r1, [pc, #36]	; (8003a10 <siprintf+0x3c>)
 80039ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80039f0:	9105      	str	r1, [sp, #20]
 80039f2:	6800      	ldr	r0, [r0, #0]
 80039f4:	a902      	add	r1, sp, #8
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	f000 f868 	bl	8003acc <_svfiprintf_r>
 80039fc:	2200      	movs	r2, #0
 80039fe:	9b02      	ldr	r3, [sp, #8]
 8003a00:	701a      	strb	r2, [r3, #0]
 8003a02:	b01c      	add	sp, #112	; 0x70
 8003a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8003a08:	b003      	add	sp, #12
 8003a0a:	4770      	bx	lr
 8003a0c:	2000000c 	.word	0x2000000c
 8003a10:	ffff0208 	.word	0xffff0208

08003a14 <__ssputs_r>:
 8003a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a18:	688e      	ldr	r6, [r1, #8]
 8003a1a:	4682      	mov	sl, r0
 8003a1c:	429e      	cmp	r6, r3
 8003a1e:	460c      	mov	r4, r1
 8003a20:	4690      	mov	r8, r2
 8003a22:	461f      	mov	r7, r3
 8003a24:	d838      	bhi.n	8003a98 <__ssputs_r+0x84>
 8003a26:	898a      	ldrh	r2, [r1, #12]
 8003a28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003a2c:	d032      	beq.n	8003a94 <__ssputs_r+0x80>
 8003a2e:	6825      	ldr	r5, [r4, #0]
 8003a30:	6909      	ldr	r1, [r1, #16]
 8003a32:	3301      	adds	r3, #1
 8003a34:	eba5 0901 	sub.w	r9, r5, r1
 8003a38:	6965      	ldr	r5, [r4, #20]
 8003a3a:	444b      	add	r3, r9
 8003a3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a44:	106d      	asrs	r5, r5, #1
 8003a46:	429d      	cmp	r5, r3
 8003a48:	bf38      	it	cc
 8003a4a:	461d      	movcc	r5, r3
 8003a4c:	0553      	lsls	r3, r2, #21
 8003a4e:	d531      	bpl.n	8003ab4 <__ssputs_r+0xa0>
 8003a50:	4629      	mov	r1, r5
 8003a52:	f000 fb53 	bl	80040fc <_malloc_r>
 8003a56:	4606      	mov	r6, r0
 8003a58:	b950      	cbnz	r0, 8003a70 <__ssputs_r+0x5c>
 8003a5a:	230c      	movs	r3, #12
 8003a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a60:	f8ca 3000 	str.w	r3, [sl]
 8003a64:	89a3      	ldrh	r3, [r4, #12]
 8003a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a6a:	81a3      	strh	r3, [r4, #12]
 8003a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a70:	464a      	mov	r2, r9
 8003a72:	6921      	ldr	r1, [r4, #16]
 8003a74:	f000 face 	bl	8004014 <memcpy>
 8003a78:	89a3      	ldrh	r3, [r4, #12]
 8003a7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a82:	81a3      	strh	r3, [r4, #12]
 8003a84:	6126      	str	r6, [r4, #16]
 8003a86:	444e      	add	r6, r9
 8003a88:	6026      	str	r6, [r4, #0]
 8003a8a:	463e      	mov	r6, r7
 8003a8c:	6165      	str	r5, [r4, #20]
 8003a8e:	eba5 0509 	sub.w	r5, r5, r9
 8003a92:	60a5      	str	r5, [r4, #8]
 8003a94:	42be      	cmp	r6, r7
 8003a96:	d900      	bls.n	8003a9a <__ssputs_r+0x86>
 8003a98:	463e      	mov	r6, r7
 8003a9a:	4632      	mov	r2, r6
 8003a9c:	4641      	mov	r1, r8
 8003a9e:	6820      	ldr	r0, [r4, #0]
 8003aa0:	f000 fac6 	bl	8004030 <memmove>
 8003aa4:	68a3      	ldr	r3, [r4, #8]
 8003aa6:	6822      	ldr	r2, [r4, #0]
 8003aa8:	1b9b      	subs	r3, r3, r6
 8003aaa:	4432      	add	r2, r6
 8003aac:	2000      	movs	r0, #0
 8003aae:	60a3      	str	r3, [r4, #8]
 8003ab0:	6022      	str	r2, [r4, #0]
 8003ab2:	e7db      	b.n	8003a6c <__ssputs_r+0x58>
 8003ab4:	462a      	mov	r2, r5
 8003ab6:	f000 fb7b 	bl	80041b0 <_realloc_r>
 8003aba:	4606      	mov	r6, r0
 8003abc:	2800      	cmp	r0, #0
 8003abe:	d1e1      	bne.n	8003a84 <__ssputs_r+0x70>
 8003ac0:	4650      	mov	r0, sl
 8003ac2:	6921      	ldr	r1, [r4, #16]
 8003ac4:	f000 face 	bl	8004064 <_free_r>
 8003ac8:	e7c7      	b.n	8003a5a <__ssputs_r+0x46>
	...

08003acc <_svfiprintf_r>:
 8003acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ad0:	4698      	mov	r8, r3
 8003ad2:	898b      	ldrh	r3, [r1, #12]
 8003ad4:	4607      	mov	r7, r0
 8003ad6:	061b      	lsls	r3, r3, #24
 8003ad8:	460d      	mov	r5, r1
 8003ada:	4614      	mov	r4, r2
 8003adc:	b09d      	sub	sp, #116	; 0x74
 8003ade:	d50e      	bpl.n	8003afe <_svfiprintf_r+0x32>
 8003ae0:	690b      	ldr	r3, [r1, #16]
 8003ae2:	b963      	cbnz	r3, 8003afe <_svfiprintf_r+0x32>
 8003ae4:	2140      	movs	r1, #64	; 0x40
 8003ae6:	f000 fb09 	bl	80040fc <_malloc_r>
 8003aea:	6028      	str	r0, [r5, #0]
 8003aec:	6128      	str	r0, [r5, #16]
 8003aee:	b920      	cbnz	r0, 8003afa <_svfiprintf_r+0x2e>
 8003af0:	230c      	movs	r3, #12
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	f04f 30ff 	mov.w	r0, #4294967295
 8003af8:	e0d1      	b.n	8003c9e <_svfiprintf_r+0x1d2>
 8003afa:	2340      	movs	r3, #64	; 0x40
 8003afc:	616b      	str	r3, [r5, #20]
 8003afe:	2300      	movs	r3, #0
 8003b00:	9309      	str	r3, [sp, #36]	; 0x24
 8003b02:	2320      	movs	r3, #32
 8003b04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003b08:	2330      	movs	r3, #48	; 0x30
 8003b0a:	f04f 0901 	mov.w	r9, #1
 8003b0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b12:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003cb8 <_svfiprintf_r+0x1ec>
 8003b16:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b1a:	4623      	mov	r3, r4
 8003b1c:	469a      	mov	sl, r3
 8003b1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b22:	b10a      	cbz	r2, 8003b28 <_svfiprintf_r+0x5c>
 8003b24:	2a25      	cmp	r2, #37	; 0x25
 8003b26:	d1f9      	bne.n	8003b1c <_svfiprintf_r+0x50>
 8003b28:	ebba 0b04 	subs.w	fp, sl, r4
 8003b2c:	d00b      	beq.n	8003b46 <_svfiprintf_r+0x7a>
 8003b2e:	465b      	mov	r3, fp
 8003b30:	4622      	mov	r2, r4
 8003b32:	4629      	mov	r1, r5
 8003b34:	4638      	mov	r0, r7
 8003b36:	f7ff ff6d 	bl	8003a14 <__ssputs_r>
 8003b3a:	3001      	adds	r0, #1
 8003b3c:	f000 80aa 	beq.w	8003c94 <_svfiprintf_r+0x1c8>
 8003b40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b42:	445a      	add	r2, fp
 8003b44:	9209      	str	r2, [sp, #36]	; 0x24
 8003b46:	f89a 3000 	ldrb.w	r3, [sl]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 80a2 	beq.w	8003c94 <_svfiprintf_r+0x1c8>
 8003b50:	2300      	movs	r3, #0
 8003b52:	f04f 32ff 	mov.w	r2, #4294967295
 8003b56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b5a:	f10a 0a01 	add.w	sl, sl, #1
 8003b5e:	9304      	str	r3, [sp, #16]
 8003b60:	9307      	str	r3, [sp, #28]
 8003b62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b66:	931a      	str	r3, [sp, #104]	; 0x68
 8003b68:	4654      	mov	r4, sl
 8003b6a:	2205      	movs	r2, #5
 8003b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b70:	4851      	ldr	r0, [pc, #324]	; (8003cb8 <_svfiprintf_r+0x1ec>)
 8003b72:	f000 fa41 	bl	8003ff8 <memchr>
 8003b76:	9a04      	ldr	r2, [sp, #16]
 8003b78:	b9d8      	cbnz	r0, 8003bb2 <_svfiprintf_r+0xe6>
 8003b7a:	06d0      	lsls	r0, r2, #27
 8003b7c:	bf44      	itt	mi
 8003b7e:	2320      	movmi	r3, #32
 8003b80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b84:	0711      	lsls	r1, r2, #28
 8003b86:	bf44      	itt	mi
 8003b88:	232b      	movmi	r3, #43	; 0x2b
 8003b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8003b92:	2b2a      	cmp	r3, #42	; 0x2a
 8003b94:	d015      	beq.n	8003bc2 <_svfiprintf_r+0xf6>
 8003b96:	4654      	mov	r4, sl
 8003b98:	2000      	movs	r0, #0
 8003b9a:	f04f 0c0a 	mov.w	ip, #10
 8003b9e:	9a07      	ldr	r2, [sp, #28]
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ba6:	3b30      	subs	r3, #48	; 0x30
 8003ba8:	2b09      	cmp	r3, #9
 8003baa:	d94e      	bls.n	8003c4a <_svfiprintf_r+0x17e>
 8003bac:	b1b0      	cbz	r0, 8003bdc <_svfiprintf_r+0x110>
 8003bae:	9207      	str	r2, [sp, #28]
 8003bb0:	e014      	b.n	8003bdc <_svfiprintf_r+0x110>
 8003bb2:	eba0 0308 	sub.w	r3, r0, r8
 8003bb6:	fa09 f303 	lsl.w	r3, r9, r3
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	46a2      	mov	sl, r4
 8003bbe:	9304      	str	r3, [sp, #16]
 8003bc0:	e7d2      	b.n	8003b68 <_svfiprintf_r+0x9c>
 8003bc2:	9b03      	ldr	r3, [sp, #12]
 8003bc4:	1d19      	adds	r1, r3, #4
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	9103      	str	r1, [sp, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	bfbb      	ittet	lt
 8003bce:	425b      	neglt	r3, r3
 8003bd0:	f042 0202 	orrlt.w	r2, r2, #2
 8003bd4:	9307      	strge	r3, [sp, #28]
 8003bd6:	9307      	strlt	r3, [sp, #28]
 8003bd8:	bfb8      	it	lt
 8003bda:	9204      	strlt	r2, [sp, #16]
 8003bdc:	7823      	ldrb	r3, [r4, #0]
 8003bde:	2b2e      	cmp	r3, #46	; 0x2e
 8003be0:	d10c      	bne.n	8003bfc <_svfiprintf_r+0x130>
 8003be2:	7863      	ldrb	r3, [r4, #1]
 8003be4:	2b2a      	cmp	r3, #42	; 0x2a
 8003be6:	d135      	bne.n	8003c54 <_svfiprintf_r+0x188>
 8003be8:	9b03      	ldr	r3, [sp, #12]
 8003bea:	3402      	adds	r4, #2
 8003bec:	1d1a      	adds	r2, r3, #4
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	9203      	str	r2, [sp, #12]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	bfb8      	it	lt
 8003bf6:	f04f 33ff 	movlt.w	r3, #4294967295
 8003bfa:	9305      	str	r3, [sp, #20]
 8003bfc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003cc8 <_svfiprintf_r+0x1fc>
 8003c00:	2203      	movs	r2, #3
 8003c02:	4650      	mov	r0, sl
 8003c04:	7821      	ldrb	r1, [r4, #0]
 8003c06:	f000 f9f7 	bl	8003ff8 <memchr>
 8003c0a:	b140      	cbz	r0, 8003c1e <_svfiprintf_r+0x152>
 8003c0c:	2340      	movs	r3, #64	; 0x40
 8003c0e:	eba0 000a 	sub.w	r0, r0, sl
 8003c12:	fa03 f000 	lsl.w	r0, r3, r0
 8003c16:	9b04      	ldr	r3, [sp, #16]
 8003c18:	3401      	adds	r4, #1
 8003c1a:	4303      	orrs	r3, r0
 8003c1c:	9304      	str	r3, [sp, #16]
 8003c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c22:	2206      	movs	r2, #6
 8003c24:	4825      	ldr	r0, [pc, #148]	; (8003cbc <_svfiprintf_r+0x1f0>)
 8003c26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c2a:	f000 f9e5 	bl	8003ff8 <memchr>
 8003c2e:	2800      	cmp	r0, #0
 8003c30:	d038      	beq.n	8003ca4 <_svfiprintf_r+0x1d8>
 8003c32:	4b23      	ldr	r3, [pc, #140]	; (8003cc0 <_svfiprintf_r+0x1f4>)
 8003c34:	bb1b      	cbnz	r3, 8003c7e <_svfiprintf_r+0x1b2>
 8003c36:	9b03      	ldr	r3, [sp, #12]
 8003c38:	3307      	adds	r3, #7
 8003c3a:	f023 0307 	bic.w	r3, r3, #7
 8003c3e:	3308      	adds	r3, #8
 8003c40:	9303      	str	r3, [sp, #12]
 8003c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c44:	4433      	add	r3, r6
 8003c46:	9309      	str	r3, [sp, #36]	; 0x24
 8003c48:	e767      	b.n	8003b1a <_svfiprintf_r+0x4e>
 8003c4a:	460c      	mov	r4, r1
 8003c4c:	2001      	movs	r0, #1
 8003c4e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c52:	e7a5      	b.n	8003ba0 <_svfiprintf_r+0xd4>
 8003c54:	2300      	movs	r3, #0
 8003c56:	f04f 0c0a 	mov.w	ip, #10
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	3401      	adds	r4, #1
 8003c5e:	9305      	str	r3, [sp, #20]
 8003c60:	4620      	mov	r0, r4
 8003c62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c66:	3a30      	subs	r2, #48	; 0x30
 8003c68:	2a09      	cmp	r2, #9
 8003c6a:	d903      	bls.n	8003c74 <_svfiprintf_r+0x1a8>
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d0c5      	beq.n	8003bfc <_svfiprintf_r+0x130>
 8003c70:	9105      	str	r1, [sp, #20]
 8003c72:	e7c3      	b.n	8003bfc <_svfiprintf_r+0x130>
 8003c74:	4604      	mov	r4, r0
 8003c76:	2301      	movs	r3, #1
 8003c78:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c7c:	e7f0      	b.n	8003c60 <_svfiprintf_r+0x194>
 8003c7e:	ab03      	add	r3, sp, #12
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	462a      	mov	r2, r5
 8003c84:	4638      	mov	r0, r7
 8003c86:	4b0f      	ldr	r3, [pc, #60]	; (8003cc4 <_svfiprintf_r+0x1f8>)
 8003c88:	a904      	add	r1, sp, #16
 8003c8a:	f3af 8000 	nop.w
 8003c8e:	1c42      	adds	r2, r0, #1
 8003c90:	4606      	mov	r6, r0
 8003c92:	d1d6      	bne.n	8003c42 <_svfiprintf_r+0x176>
 8003c94:	89ab      	ldrh	r3, [r5, #12]
 8003c96:	065b      	lsls	r3, r3, #25
 8003c98:	f53f af2c 	bmi.w	8003af4 <_svfiprintf_r+0x28>
 8003c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c9e:	b01d      	add	sp, #116	; 0x74
 8003ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ca4:	ab03      	add	r3, sp, #12
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	462a      	mov	r2, r5
 8003caa:	4638      	mov	r0, r7
 8003cac:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <_svfiprintf_r+0x1f8>)
 8003cae:	a904      	add	r1, sp, #16
 8003cb0:	f000 f87c 	bl	8003dac <_printf_i>
 8003cb4:	e7eb      	b.n	8003c8e <_svfiprintf_r+0x1c2>
 8003cb6:	bf00      	nop
 8003cb8:	080042de 	.word	0x080042de
 8003cbc:	080042e8 	.word	0x080042e8
 8003cc0:	00000000 	.word	0x00000000
 8003cc4:	08003a15 	.word	0x08003a15
 8003cc8:	080042e4 	.word	0x080042e4

08003ccc <_printf_common>:
 8003ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd0:	4616      	mov	r6, r2
 8003cd2:	4699      	mov	r9, r3
 8003cd4:	688a      	ldr	r2, [r1, #8]
 8003cd6:	690b      	ldr	r3, [r1, #16]
 8003cd8:	4607      	mov	r7, r0
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	bfb8      	it	lt
 8003cde:	4613      	movlt	r3, r2
 8003ce0:	6033      	str	r3, [r6, #0]
 8003ce2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ce6:	460c      	mov	r4, r1
 8003ce8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cec:	b10a      	cbz	r2, 8003cf2 <_printf_common+0x26>
 8003cee:	3301      	adds	r3, #1
 8003cf0:	6033      	str	r3, [r6, #0]
 8003cf2:	6823      	ldr	r3, [r4, #0]
 8003cf4:	0699      	lsls	r1, r3, #26
 8003cf6:	bf42      	ittt	mi
 8003cf8:	6833      	ldrmi	r3, [r6, #0]
 8003cfa:	3302      	addmi	r3, #2
 8003cfc:	6033      	strmi	r3, [r6, #0]
 8003cfe:	6825      	ldr	r5, [r4, #0]
 8003d00:	f015 0506 	ands.w	r5, r5, #6
 8003d04:	d106      	bne.n	8003d14 <_printf_common+0x48>
 8003d06:	f104 0a19 	add.w	sl, r4, #25
 8003d0a:	68e3      	ldr	r3, [r4, #12]
 8003d0c:	6832      	ldr	r2, [r6, #0]
 8003d0e:	1a9b      	subs	r3, r3, r2
 8003d10:	42ab      	cmp	r3, r5
 8003d12:	dc28      	bgt.n	8003d66 <_printf_common+0x9a>
 8003d14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d18:	1e13      	subs	r3, r2, #0
 8003d1a:	6822      	ldr	r2, [r4, #0]
 8003d1c:	bf18      	it	ne
 8003d1e:	2301      	movne	r3, #1
 8003d20:	0692      	lsls	r2, r2, #26
 8003d22:	d42d      	bmi.n	8003d80 <_printf_common+0xb4>
 8003d24:	4649      	mov	r1, r9
 8003d26:	4638      	mov	r0, r7
 8003d28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d2c:	47c0      	blx	r8
 8003d2e:	3001      	adds	r0, #1
 8003d30:	d020      	beq.n	8003d74 <_printf_common+0xa8>
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	68e5      	ldr	r5, [r4, #12]
 8003d36:	f003 0306 	and.w	r3, r3, #6
 8003d3a:	2b04      	cmp	r3, #4
 8003d3c:	bf18      	it	ne
 8003d3e:	2500      	movne	r5, #0
 8003d40:	6832      	ldr	r2, [r6, #0]
 8003d42:	f04f 0600 	mov.w	r6, #0
 8003d46:	68a3      	ldr	r3, [r4, #8]
 8003d48:	bf08      	it	eq
 8003d4a:	1aad      	subeq	r5, r5, r2
 8003d4c:	6922      	ldr	r2, [r4, #16]
 8003d4e:	bf08      	it	eq
 8003d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d54:	4293      	cmp	r3, r2
 8003d56:	bfc4      	itt	gt
 8003d58:	1a9b      	subgt	r3, r3, r2
 8003d5a:	18ed      	addgt	r5, r5, r3
 8003d5c:	341a      	adds	r4, #26
 8003d5e:	42b5      	cmp	r5, r6
 8003d60:	d11a      	bne.n	8003d98 <_printf_common+0xcc>
 8003d62:	2000      	movs	r0, #0
 8003d64:	e008      	b.n	8003d78 <_printf_common+0xac>
 8003d66:	2301      	movs	r3, #1
 8003d68:	4652      	mov	r2, sl
 8003d6a:	4649      	mov	r1, r9
 8003d6c:	4638      	mov	r0, r7
 8003d6e:	47c0      	blx	r8
 8003d70:	3001      	adds	r0, #1
 8003d72:	d103      	bne.n	8003d7c <_printf_common+0xb0>
 8003d74:	f04f 30ff 	mov.w	r0, #4294967295
 8003d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d7c:	3501      	adds	r5, #1
 8003d7e:	e7c4      	b.n	8003d0a <_printf_common+0x3e>
 8003d80:	2030      	movs	r0, #48	; 0x30
 8003d82:	18e1      	adds	r1, r4, r3
 8003d84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d8e:	4422      	add	r2, r4
 8003d90:	3302      	adds	r3, #2
 8003d92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d96:	e7c5      	b.n	8003d24 <_printf_common+0x58>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	4622      	mov	r2, r4
 8003d9c:	4649      	mov	r1, r9
 8003d9e:	4638      	mov	r0, r7
 8003da0:	47c0      	blx	r8
 8003da2:	3001      	adds	r0, #1
 8003da4:	d0e6      	beq.n	8003d74 <_printf_common+0xa8>
 8003da6:	3601      	adds	r6, #1
 8003da8:	e7d9      	b.n	8003d5e <_printf_common+0x92>
	...

08003dac <_printf_i>:
 8003dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003db0:	460c      	mov	r4, r1
 8003db2:	7e27      	ldrb	r7, [r4, #24]
 8003db4:	4691      	mov	r9, r2
 8003db6:	2f78      	cmp	r7, #120	; 0x78
 8003db8:	4680      	mov	r8, r0
 8003dba:	469a      	mov	sl, r3
 8003dbc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003dbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003dc2:	d807      	bhi.n	8003dd4 <_printf_i+0x28>
 8003dc4:	2f62      	cmp	r7, #98	; 0x62
 8003dc6:	d80a      	bhi.n	8003dde <_printf_i+0x32>
 8003dc8:	2f00      	cmp	r7, #0
 8003dca:	f000 80d9 	beq.w	8003f80 <_printf_i+0x1d4>
 8003dce:	2f58      	cmp	r7, #88	; 0x58
 8003dd0:	f000 80a4 	beq.w	8003f1c <_printf_i+0x170>
 8003dd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003dd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ddc:	e03a      	b.n	8003e54 <_printf_i+0xa8>
 8003dde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003de2:	2b15      	cmp	r3, #21
 8003de4:	d8f6      	bhi.n	8003dd4 <_printf_i+0x28>
 8003de6:	a001      	add	r0, pc, #4	; (adr r0, 8003dec <_printf_i+0x40>)
 8003de8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003dec:	08003e45 	.word	0x08003e45
 8003df0:	08003e59 	.word	0x08003e59
 8003df4:	08003dd5 	.word	0x08003dd5
 8003df8:	08003dd5 	.word	0x08003dd5
 8003dfc:	08003dd5 	.word	0x08003dd5
 8003e00:	08003dd5 	.word	0x08003dd5
 8003e04:	08003e59 	.word	0x08003e59
 8003e08:	08003dd5 	.word	0x08003dd5
 8003e0c:	08003dd5 	.word	0x08003dd5
 8003e10:	08003dd5 	.word	0x08003dd5
 8003e14:	08003dd5 	.word	0x08003dd5
 8003e18:	08003f67 	.word	0x08003f67
 8003e1c:	08003e89 	.word	0x08003e89
 8003e20:	08003f49 	.word	0x08003f49
 8003e24:	08003dd5 	.word	0x08003dd5
 8003e28:	08003dd5 	.word	0x08003dd5
 8003e2c:	08003f89 	.word	0x08003f89
 8003e30:	08003dd5 	.word	0x08003dd5
 8003e34:	08003e89 	.word	0x08003e89
 8003e38:	08003dd5 	.word	0x08003dd5
 8003e3c:	08003dd5 	.word	0x08003dd5
 8003e40:	08003f51 	.word	0x08003f51
 8003e44:	680b      	ldr	r3, [r1, #0]
 8003e46:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003e4a:	1d1a      	adds	r2, r3, #4
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	600a      	str	r2, [r1, #0]
 8003e50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0a4      	b.n	8003fa2 <_printf_i+0x1f6>
 8003e58:	6825      	ldr	r5, [r4, #0]
 8003e5a:	6808      	ldr	r0, [r1, #0]
 8003e5c:	062e      	lsls	r6, r5, #24
 8003e5e:	f100 0304 	add.w	r3, r0, #4
 8003e62:	d50a      	bpl.n	8003e7a <_printf_i+0xce>
 8003e64:	6805      	ldr	r5, [r0, #0]
 8003e66:	600b      	str	r3, [r1, #0]
 8003e68:	2d00      	cmp	r5, #0
 8003e6a:	da03      	bge.n	8003e74 <_printf_i+0xc8>
 8003e6c:	232d      	movs	r3, #45	; 0x2d
 8003e6e:	426d      	negs	r5, r5
 8003e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e74:	230a      	movs	r3, #10
 8003e76:	485e      	ldr	r0, [pc, #376]	; (8003ff0 <_printf_i+0x244>)
 8003e78:	e019      	b.n	8003eae <_printf_i+0x102>
 8003e7a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003e7e:	6805      	ldr	r5, [r0, #0]
 8003e80:	600b      	str	r3, [r1, #0]
 8003e82:	bf18      	it	ne
 8003e84:	b22d      	sxthne	r5, r5
 8003e86:	e7ef      	b.n	8003e68 <_printf_i+0xbc>
 8003e88:	680b      	ldr	r3, [r1, #0]
 8003e8a:	6825      	ldr	r5, [r4, #0]
 8003e8c:	1d18      	adds	r0, r3, #4
 8003e8e:	6008      	str	r0, [r1, #0]
 8003e90:	0628      	lsls	r0, r5, #24
 8003e92:	d501      	bpl.n	8003e98 <_printf_i+0xec>
 8003e94:	681d      	ldr	r5, [r3, #0]
 8003e96:	e002      	b.n	8003e9e <_printf_i+0xf2>
 8003e98:	0669      	lsls	r1, r5, #25
 8003e9a:	d5fb      	bpl.n	8003e94 <_printf_i+0xe8>
 8003e9c:	881d      	ldrh	r5, [r3, #0]
 8003e9e:	2f6f      	cmp	r7, #111	; 0x6f
 8003ea0:	bf0c      	ite	eq
 8003ea2:	2308      	moveq	r3, #8
 8003ea4:	230a      	movne	r3, #10
 8003ea6:	4852      	ldr	r0, [pc, #328]	; (8003ff0 <_printf_i+0x244>)
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003eae:	6866      	ldr	r6, [r4, #4]
 8003eb0:	2e00      	cmp	r6, #0
 8003eb2:	bfa8      	it	ge
 8003eb4:	6821      	ldrge	r1, [r4, #0]
 8003eb6:	60a6      	str	r6, [r4, #8]
 8003eb8:	bfa4      	itt	ge
 8003eba:	f021 0104 	bicge.w	r1, r1, #4
 8003ebe:	6021      	strge	r1, [r4, #0]
 8003ec0:	b90d      	cbnz	r5, 8003ec6 <_printf_i+0x11a>
 8003ec2:	2e00      	cmp	r6, #0
 8003ec4:	d04d      	beq.n	8003f62 <_printf_i+0x1b6>
 8003ec6:	4616      	mov	r6, r2
 8003ec8:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ecc:	fb03 5711 	mls	r7, r3, r1, r5
 8003ed0:	5dc7      	ldrb	r7, [r0, r7]
 8003ed2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ed6:	462f      	mov	r7, r5
 8003ed8:	42bb      	cmp	r3, r7
 8003eda:	460d      	mov	r5, r1
 8003edc:	d9f4      	bls.n	8003ec8 <_printf_i+0x11c>
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d10b      	bne.n	8003efa <_printf_i+0x14e>
 8003ee2:	6823      	ldr	r3, [r4, #0]
 8003ee4:	07df      	lsls	r7, r3, #31
 8003ee6:	d508      	bpl.n	8003efa <_printf_i+0x14e>
 8003ee8:	6923      	ldr	r3, [r4, #16]
 8003eea:	6861      	ldr	r1, [r4, #4]
 8003eec:	4299      	cmp	r1, r3
 8003eee:	bfde      	ittt	le
 8003ef0:	2330      	movle	r3, #48	; 0x30
 8003ef2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ef6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003efa:	1b92      	subs	r2, r2, r6
 8003efc:	6122      	str	r2, [r4, #16]
 8003efe:	464b      	mov	r3, r9
 8003f00:	4621      	mov	r1, r4
 8003f02:	4640      	mov	r0, r8
 8003f04:	f8cd a000 	str.w	sl, [sp]
 8003f08:	aa03      	add	r2, sp, #12
 8003f0a:	f7ff fedf 	bl	8003ccc <_printf_common>
 8003f0e:	3001      	adds	r0, #1
 8003f10:	d14c      	bne.n	8003fac <_printf_i+0x200>
 8003f12:	f04f 30ff 	mov.w	r0, #4294967295
 8003f16:	b004      	add	sp, #16
 8003f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f1c:	4834      	ldr	r0, [pc, #208]	; (8003ff0 <_printf_i+0x244>)
 8003f1e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003f22:	680e      	ldr	r6, [r1, #0]
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	f856 5b04 	ldr.w	r5, [r6], #4
 8003f2a:	061f      	lsls	r7, r3, #24
 8003f2c:	600e      	str	r6, [r1, #0]
 8003f2e:	d514      	bpl.n	8003f5a <_printf_i+0x1ae>
 8003f30:	07d9      	lsls	r1, r3, #31
 8003f32:	bf44      	itt	mi
 8003f34:	f043 0320 	orrmi.w	r3, r3, #32
 8003f38:	6023      	strmi	r3, [r4, #0]
 8003f3a:	b91d      	cbnz	r5, 8003f44 <_printf_i+0x198>
 8003f3c:	6823      	ldr	r3, [r4, #0]
 8003f3e:	f023 0320 	bic.w	r3, r3, #32
 8003f42:	6023      	str	r3, [r4, #0]
 8003f44:	2310      	movs	r3, #16
 8003f46:	e7af      	b.n	8003ea8 <_printf_i+0xfc>
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	f043 0320 	orr.w	r3, r3, #32
 8003f4e:	6023      	str	r3, [r4, #0]
 8003f50:	2378      	movs	r3, #120	; 0x78
 8003f52:	4828      	ldr	r0, [pc, #160]	; (8003ff4 <_printf_i+0x248>)
 8003f54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f58:	e7e3      	b.n	8003f22 <_printf_i+0x176>
 8003f5a:	065e      	lsls	r6, r3, #25
 8003f5c:	bf48      	it	mi
 8003f5e:	b2ad      	uxthmi	r5, r5
 8003f60:	e7e6      	b.n	8003f30 <_printf_i+0x184>
 8003f62:	4616      	mov	r6, r2
 8003f64:	e7bb      	b.n	8003ede <_printf_i+0x132>
 8003f66:	680b      	ldr	r3, [r1, #0]
 8003f68:	6826      	ldr	r6, [r4, #0]
 8003f6a:	1d1d      	adds	r5, r3, #4
 8003f6c:	6960      	ldr	r0, [r4, #20]
 8003f6e:	600d      	str	r5, [r1, #0]
 8003f70:	0635      	lsls	r5, r6, #24
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	d501      	bpl.n	8003f7a <_printf_i+0x1ce>
 8003f76:	6018      	str	r0, [r3, #0]
 8003f78:	e002      	b.n	8003f80 <_printf_i+0x1d4>
 8003f7a:	0671      	lsls	r1, r6, #25
 8003f7c:	d5fb      	bpl.n	8003f76 <_printf_i+0x1ca>
 8003f7e:	8018      	strh	r0, [r3, #0]
 8003f80:	2300      	movs	r3, #0
 8003f82:	4616      	mov	r6, r2
 8003f84:	6123      	str	r3, [r4, #16]
 8003f86:	e7ba      	b.n	8003efe <_printf_i+0x152>
 8003f88:	680b      	ldr	r3, [r1, #0]
 8003f8a:	1d1a      	adds	r2, r3, #4
 8003f8c:	600a      	str	r2, [r1, #0]
 8003f8e:	681e      	ldr	r6, [r3, #0]
 8003f90:	2100      	movs	r1, #0
 8003f92:	4630      	mov	r0, r6
 8003f94:	6862      	ldr	r2, [r4, #4]
 8003f96:	f000 f82f 	bl	8003ff8 <memchr>
 8003f9a:	b108      	cbz	r0, 8003fa0 <_printf_i+0x1f4>
 8003f9c:	1b80      	subs	r0, r0, r6
 8003f9e:	6060      	str	r0, [r4, #4]
 8003fa0:	6863      	ldr	r3, [r4, #4]
 8003fa2:	6123      	str	r3, [r4, #16]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003faa:	e7a8      	b.n	8003efe <_printf_i+0x152>
 8003fac:	4632      	mov	r2, r6
 8003fae:	4649      	mov	r1, r9
 8003fb0:	4640      	mov	r0, r8
 8003fb2:	6923      	ldr	r3, [r4, #16]
 8003fb4:	47d0      	blx	sl
 8003fb6:	3001      	adds	r0, #1
 8003fb8:	d0ab      	beq.n	8003f12 <_printf_i+0x166>
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	079b      	lsls	r3, r3, #30
 8003fbe:	d413      	bmi.n	8003fe8 <_printf_i+0x23c>
 8003fc0:	68e0      	ldr	r0, [r4, #12]
 8003fc2:	9b03      	ldr	r3, [sp, #12]
 8003fc4:	4298      	cmp	r0, r3
 8003fc6:	bfb8      	it	lt
 8003fc8:	4618      	movlt	r0, r3
 8003fca:	e7a4      	b.n	8003f16 <_printf_i+0x16a>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	4632      	mov	r2, r6
 8003fd0:	4649      	mov	r1, r9
 8003fd2:	4640      	mov	r0, r8
 8003fd4:	47d0      	blx	sl
 8003fd6:	3001      	adds	r0, #1
 8003fd8:	d09b      	beq.n	8003f12 <_printf_i+0x166>
 8003fda:	3501      	adds	r5, #1
 8003fdc:	68e3      	ldr	r3, [r4, #12]
 8003fde:	9903      	ldr	r1, [sp, #12]
 8003fe0:	1a5b      	subs	r3, r3, r1
 8003fe2:	42ab      	cmp	r3, r5
 8003fe4:	dcf2      	bgt.n	8003fcc <_printf_i+0x220>
 8003fe6:	e7eb      	b.n	8003fc0 <_printf_i+0x214>
 8003fe8:	2500      	movs	r5, #0
 8003fea:	f104 0619 	add.w	r6, r4, #25
 8003fee:	e7f5      	b.n	8003fdc <_printf_i+0x230>
 8003ff0:	080042ef 	.word	0x080042ef
 8003ff4:	08004300 	.word	0x08004300

08003ff8 <memchr>:
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	b510      	push	{r4, lr}
 8003ffc:	b2c9      	uxtb	r1, r1
 8003ffe:	4402      	add	r2, r0
 8004000:	4293      	cmp	r3, r2
 8004002:	4618      	mov	r0, r3
 8004004:	d101      	bne.n	800400a <memchr+0x12>
 8004006:	2000      	movs	r0, #0
 8004008:	e003      	b.n	8004012 <memchr+0x1a>
 800400a:	7804      	ldrb	r4, [r0, #0]
 800400c:	3301      	adds	r3, #1
 800400e:	428c      	cmp	r4, r1
 8004010:	d1f6      	bne.n	8004000 <memchr+0x8>
 8004012:	bd10      	pop	{r4, pc}

08004014 <memcpy>:
 8004014:	440a      	add	r2, r1
 8004016:	4291      	cmp	r1, r2
 8004018:	f100 33ff 	add.w	r3, r0, #4294967295
 800401c:	d100      	bne.n	8004020 <memcpy+0xc>
 800401e:	4770      	bx	lr
 8004020:	b510      	push	{r4, lr}
 8004022:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004026:	4291      	cmp	r1, r2
 8004028:	f803 4f01 	strb.w	r4, [r3, #1]!
 800402c:	d1f9      	bne.n	8004022 <memcpy+0xe>
 800402e:	bd10      	pop	{r4, pc}

08004030 <memmove>:
 8004030:	4288      	cmp	r0, r1
 8004032:	b510      	push	{r4, lr}
 8004034:	eb01 0402 	add.w	r4, r1, r2
 8004038:	d902      	bls.n	8004040 <memmove+0x10>
 800403a:	4284      	cmp	r4, r0
 800403c:	4623      	mov	r3, r4
 800403e:	d807      	bhi.n	8004050 <memmove+0x20>
 8004040:	1e43      	subs	r3, r0, #1
 8004042:	42a1      	cmp	r1, r4
 8004044:	d008      	beq.n	8004058 <memmove+0x28>
 8004046:	f811 2b01 	ldrb.w	r2, [r1], #1
 800404a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800404e:	e7f8      	b.n	8004042 <memmove+0x12>
 8004050:	4601      	mov	r1, r0
 8004052:	4402      	add	r2, r0
 8004054:	428a      	cmp	r2, r1
 8004056:	d100      	bne.n	800405a <memmove+0x2a>
 8004058:	bd10      	pop	{r4, pc}
 800405a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800405e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004062:	e7f7      	b.n	8004054 <memmove+0x24>

08004064 <_free_r>:
 8004064:	b538      	push	{r3, r4, r5, lr}
 8004066:	4605      	mov	r5, r0
 8004068:	2900      	cmp	r1, #0
 800406a:	d043      	beq.n	80040f4 <_free_r+0x90>
 800406c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004070:	1f0c      	subs	r4, r1, #4
 8004072:	2b00      	cmp	r3, #0
 8004074:	bfb8      	it	lt
 8004076:	18e4      	addlt	r4, r4, r3
 8004078:	f000 f8d0 	bl	800421c <__malloc_lock>
 800407c:	4a1e      	ldr	r2, [pc, #120]	; (80040f8 <_free_r+0x94>)
 800407e:	6813      	ldr	r3, [r2, #0]
 8004080:	4610      	mov	r0, r2
 8004082:	b933      	cbnz	r3, 8004092 <_free_r+0x2e>
 8004084:	6063      	str	r3, [r4, #4]
 8004086:	6014      	str	r4, [r2, #0]
 8004088:	4628      	mov	r0, r5
 800408a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800408e:	f000 b8cb 	b.w	8004228 <__malloc_unlock>
 8004092:	42a3      	cmp	r3, r4
 8004094:	d90a      	bls.n	80040ac <_free_r+0x48>
 8004096:	6821      	ldr	r1, [r4, #0]
 8004098:	1862      	adds	r2, r4, r1
 800409a:	4293      	cmp	r3, r2
 800409c:	bf01      	itttt	eq
 800409e:	681a      	ldreq	r2, [r3, #0]
 80040a0:	685b      	ldreq	r3, [r3, #4]
 80040a2:	1852      	addeq	r2, r2, r1
 80040a4:	6022      	streq	r2, [r4, #0]
 80040a6:	6063      	str	r3, [r4, #4]
 80040a8:	6004      	str	r4, [r0, #0]
 80040aa:	e7ed      	b.n	8004088 <_free_r+0x24>
 80040ac:	461a      	mov	r2, r3
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	b10b      	cbz	r3, 80040b6 <_free_r+0x52>
 80040b2:	42a3      	cmp	r3, r4
 80040b4:	d9fa      	bls.n	80040ac <_free_r+0x48>
 80040b6:	6811      	ldr	r1, [r2, #0]
 80040b8:	1850      	adds	r0, r2, r1
 80040ba:	42a0      	cmp	r0, r4
 80040bc:	d10b      	bne.n	80040d6 <_free_r+0x72>
 80040be:	6820      	ldr	r0, [r4, #0]
 80040c0:	4401      	add	r1, r0
 80040c2:	1850      	adds	r0, r2, r1
 80040c4:	4283      	cmp	r3, r0
 80040c6:	6011      	str	r1, [r2, #0]
 80040c8:	d1de      	bne.n	8004088 <_free_r+0x24>
 80040ca:	6818      	ldr	r0, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	4401      	add	r1, r0
 80040d0:	6011      	str	r1, [r2, #0]
 80040d2:	6053      	str	r3, [r2, #4]
 80040d4:	e7d8      	b.n	8004088 <_free_r+0x24>
 80040d6:	d902      	bls.n	80040de <_free_r+0x7a>
 80040d8:	230c      	movs	r3, #12
 80040da:	602b      	str	r3, [r5, #0]
 80040dc:	e7d4      	b.n	8004088 <_free_r+0x24>
 80040de:	6820      	ldr	r0, [r4, #0]
 80040e0:	1821      	adds	r1, r4, r0
 80040e2:	428b      	cmp	r3, r1
 80040e4:	bf01      	itttt	eq
 80040e6:	6819      	ldreq	r1, [r3, #0]
 80040e8:	685b      	ldreq	r3, [r3, #4]
 80040ea:	1809      	addeq	r1, r1, r0
 80040ec:	6021      	streq	r1, [r4, #0]
 80040ee:	6063      	str	r3, [r4, #4]
 80040f0:	6054      	str	r4, [r2, #4]
 80040f2:	e7c9      	b.n	8004088 <_free_r+0x24>
 80040f4:	bd38      	pop	{r3, r4, r5, pc}
 80040f6:	bf00      	nop
 80040f8:	200000a4 	.word	0x200000a4

080040fc <_malloc_r>:
 80040fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fe:	1ccd      	adds	r5, r1, #3
 8004100:	f025 0503 	bic.w	r5, r5, #3
 8004104:	3508      	adds	r5, #8
 8004106:	2d0c      	cmp	r5, #12
 8004108:	bf38      	it	cc
 800410a:	250c      	movcc	r5, #12
 800410c:	2d00      	cmp	r5, #0
 800410e:	4606      	mov	r6, r0
 8004110:	db01      	blt.n	8004116 <_malloc_r+0x1a>
 8004112:	42a9      	cmp	r1, r5
 8004114:	d903      	bls.n	800411e <_malloc_r+0x22>
 8004116:	230c      	movs	r3, #12
 8004118:	6033      	str	r3, [r6, #0]
 800411a:	2000      	movs	r0, #0
 800411c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800411e:	f000 f87d 	bl	800421c <__malloc_lock>
 8004122:	4921      	ldr	r1, [pc, #132]	; (80041a8 <_malloc_r+0xac>)
 8004124:	680a      	ldr	r2, [r1, #0]
 8004126:	4614      	mov	r4, r2
 8004128:	b99c      	cbnz	r4, 8004152 <_malloc_r+0x56>
 800412a:	4f20      	ldr	r7, [pc, #128]	; (80041ac <_malloc_r+0xb0>)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	b923      	cbnz	r3, 800413a <_malloc_r+0x3e>
 8004130:	4621      	mov	r1, r4
 8004132:	4630      	mov	r0, r6
 8004134:	f000 f862 	bl	80041fc <_sbrk_r>
 8004138:	6038      	str	r0, [r7, #0]
 800413a:	4629      	mov	r1, r5
 800413c:	4630      	mov	r0, r6
 800413e:	f000 f85d 	bl	80041fc <_sbrk_r>
 8004142:	1c43      	adds	r3, r0, #1
 8004144:	d123      	bne.n	800418e <_malloc_r+0x92>
 8004146:	230c      	movs	r3, #12
 8004148:	4630      	mov	r0, r6
 800414a:	6033      	str	r3, [r6, #0]
 800414c:	f000 f86c 	bl	8004228 <__malloc_unlock>
 8004150:	e7e3      	b.n	800411a <_malloc_r+0x1e>
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	1b5b      	subs	r3, r3, r5
 8004156:	d417      	bmi.n	8004188 <_malloc_r+0x8c>
 8004158:	2b0b      	cmp	r3, #11
 800415a:	d903      	bls.n	8004164 <_malloc_r+0x68>
 800415c:	6023      	str	r3, [r4, #0]
 800415e:	441c      	add	r4, r3
 8004160:	6025      	str	r5, [r4, #0]
 8004162:	e004      	b.n	800416e <_malloc_r+0x72>
 8004164:	6863      	ldr	r3, [r4, #4]
 8004166:	42a2      	cmp	r2, r4
 8004168:	bf0c      	ite	eq
 800416a:	600b      	streq	r3, [r1, #0]
 800416c:	6053      	strne	r3, [r2, #4]
 800416e:	4630      	mov	r0, r6
 8004170:	f000 f85a 	bl	8004228 <__malloc_unlock>
 8004174:	f104 000b 	add.w	r0, r4, #11
 8004178:	1d23      	adds	r3, r4, #4
 800417a:	f020 0007 	bic.w	r0, r0, #7
 800417e:	1ac2      	subs	r2, r0, r3
 8004180:	d0cc      	beq.n	800411c <_malloc_r+0x20>
 8004182:	1a1b      	subs	r3, r3, r0
 8004184:	50a3      	str	r3, [r4, r2]
 8004186:	e7c9      	b.n	800411c <_malloc_r+0x20>
 8004188:	4622      	mov	r2, r4
 800418a:	6864      	ldr	r4, [r4, #4]
 800418c:	e7cc      	b.n	8004128 <_malloc_r+0x2c>
 800418e:	1cc4      	adds	r4, r0, #3
 8004190:	f024 0403 	bic.w	r4, r4, #3
 8004194:	42a0      	cmp	r0, r4
 8004196:	d0e3      	beq.n	8004160 <_malloc_r+0x64>
 8004198:	1a21      	subs	r1, r4, r0
 800419a:	4630      	mov	r0, r6
 800419c:	f000 f82e 	bl	80041fc <_sbrk_r>
 80041a0:	3001      	adds	r0, #1
 80041a2:	d1dd      	bne.n	8004160 <_malloc_r+0x64>
 80041a4:	e7cf      	b.n	8004146 <_malloc_r+0x4a>
 80041a6:	bf00      	nop
 80041a8:	200000a4 	.word	0x200000a4
 80041ac:	200000a8 	.word	0x200000a8

080041b0 <_realloc_r>:
 80041b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b2:	4607      	mov	r7, r0
 80041b4:	4614      	mov	r4, r2
 80041b6:	460e      	mov	r6, r1
 80041b8:	b921      	cbnz	r1, 80041c4 <_realloc_r+0x14>
 80041ba:	4611      	mov	r1, r2
 80041bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80041c0:	f7ff bf9c 	b.w	80040fc <_malloc_r>
 80041c4:	b922      	cbnz	r2, 80041d0 <_realloc_r+0x20>
 80041c6:	f7ff ff4d 	bl	8004064 <_free_r>
 80041ca:	4625      	mov	r5, r4
 80041cc:	4628      	mov	r0, r5
 80041ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041d0:	f000 f830 	bl	8004234 <_malloc_usable_size_r>
 80041d4:	42a0      	cmp	r0, r4
 80041d6:	d20f      	bcs.n	80041f8 <_realloc_r+0x48>
 80041d8:	4621      	mov	r1, r4
 80041da:	4638      	mov	r0, r7
 80041dc:	f7ff ff8e 	bl	80040fc <_malloc_r>
 80041e0:	4605      	mov	r5, r0
 80041e2:	2800      	cmp	r0, #0
 80041e4:	d0f2      	beq.n	80041cc <_realloc_r+0x1c>
 80041e6:	4631      	mov	r1, r6
 80041e8:	4622      	mov	r2, r4
 80041ea:	f7ff ff13 	bl	8004014 <memcpy>
 80041ee:	4631      	mov	r1, r6
 80041f0:	4638      	mov	r0, r7
 80041f2:	f7ff ff37 	bl	8004064 <_free_r>
 80041f6:	e7e9      	b.n	80041cc <_realloc_r+0x1c>
 80041f8:	4635      	mov	r5, r6
 80041fa:	e7e7      	b.n	80041cc <_realloc_r+0x1c>

080041fc <_sbrk_r>:
 80041fc:	b538      	push	{r3, r4, r5, lr}
 80041fe:	2300      	movs	r3, #0
 8004200:	4d05      	ldr	r5, [pc, #20]	; (8004218 <_sbrk_r+0x1c>)
 8004202:	4604      	mov	r4, r0
 8004204:	4608      	mov	r0, r1
 8004206:	602b      	str	r3, [r5, #0]
 8004208:	f7fc fd52 	bl	8000cb0 <_sbrk>
 800420c:	1c43      	adds	r3, r0, #1
 800420e:	d102      	bne.n	8004216 <_sbrk_r+0x1a>
 8004210:	682b      	ldr	r3, [r5, #0]
 8004212:	b103      	cbz	r3, 8004216 <_sbrk_r+0x1a>
 8004214:	6023      	str	r3, [r4, #0]
 8004216:	bd38      	pop	{r3, r4, r5, pc}
 8004218:	200001d8 	.word	0x200001d8

0800421c <__malloc_lock>:
 800421c:	4801      	ldr	r0, [pc, #4]	; (8004224 <__malloc_lock+0x8>)
 800421e:	f000 b811 	b.w	8004244 <__retarget_lock_acquire_recursive>
 8004222:	bf00      	nop
 8004224:	200001e0 	.word	0x200001e0

08004228 <__malloc_unlock>:
 8004228:	4801      	ldr	r0, [pc, #4]	; (8004230 <__malloc_unlock+0x8>)
 800422a:	f000 b80c 	b.w	8004246 <__retarget_lock_release_recursive>
 800422e:	bf00      	nop
 8004230:	200001e0 	.word	0x200001e0

08004234 <_malloc_usable_size_r>:
 8004234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004238:	1f18      	subs	r0, r3, #4
 800423a:	2b00      	cmp	r3, #0
 800423c:	bfbc      	itt	lt
 800423e:	580b      	ldrlt	r3, [r1, r0]
 8004240:	18c0      	addlt	r0, r0, r3
 8004242:	4770      	bx	lr

08004244 <__retarget_lock_acquire_recursive>:
 8004244:	4770      	bx	lr

08004246 <__retarget_lock_release_recursive>:
 8004246:	4770      	bx	lr

08004248 <_init>:
 8004248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424a:	bf00      	nop
 800424c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424e:	bc08      	pop	{r3}
 8004250:	469e      	mov	lr, r3
 8004252:	4770      	bx	lr

08004254 <_fini>:
 8004254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004256:	bf00      	nop
 8004258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800425a:	bc08      	pop	{r3}
 800425c:	469e      	mov	lr, r3
 800425e:	4770      	bx	lr
